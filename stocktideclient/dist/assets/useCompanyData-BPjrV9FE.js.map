{"version":3,"file":"useCompanyData-BPjrV9FE.js","sources":["../../src/hooks/useCompanyData.ts"],"sourcesContent":["import {useQuery} from '@tanstack/react-query';\r\nimport axios from 'axios';\r\nimport { CompanyDataResponse } from '@typings/hooks';\r\nimport { CompanyResponseDto } from '@typings/dto';\r\n\r\nconst BASE_URL = import.meta.env.VITE_API_URL;\r\n\r\n// 커스텀 훅 정의\r\nfunction useCompanyData(startCompanyId: number, endCompanyId: number): CompanyDataResponse {\r\n\r\n    // 데이터 가져오는 함수\r\n    const fetchData = async (companyId: number) => {\r\n        const url = `${BASE_URL}/api/company/${companyId}`;\r\n        const response = await axios.get(url);\r\n        return response.data;\r\n    };\r\n\r\n    // startCompanyId 부터 endCompanyId 까지의 범위에 있는 회사 ID 배열을 생성\r\n    const companyIds = Array.from({length: endCompanyId - startCompanyId + 1}, (_, index) => startCompanyId + index);\r\n\r\n    // companyIds 배열을 순회하며 fetchData 함수를 호출, 모든 호출이 완료될 때까지 기다림\r\n    const {data, isLoading, isError} = useQuery({\r\n        queryKey: ['companyData', startCompanyId, endCompanyId],\r\n        queryFn: async () => {\r\n            const promises = companyIds.map((companyId) => fetchData(companyId));\r\n            return Promise.all(promises);\r\n        }\r\n    });\r\n\r\n    // 필요한 데이터 추출 및 저장\r\n    const extractedData = data?.map((company: CompanyResponseDto) => {\r\n        return {\r\n            companyId: company.companyId,\r\n            code: company.code,\r\n            korName: company.korName,\r\n            stockPrice: company.stockInfResponseDto.stck_prpr,// 현재 주가\r\n            stockChangeAmount: company.stockInfResponseDto.prdy_vrss,//전일 대비 주가\r\n            stockChangeRate: company.stockInfResponseDto.prdy_ctrt,\r\n        };\r\n    });\r\n\r\n    // 필요한 데이터 추출 및 저장\r\n    const extractedData2 = data?.map((company: CompanyResponseDto) => {\r\n        return {\r\n            companyId: company.companyId,\r\n            code: company.code,\r\n            korName: company.korName,\r\n            stockPrice: company.stockInfResponseDto.stck_prpr,// 현재 주가\r\n            priceChangeAmount: company.stockInfResponseDto.prdy_vrss, //전일 대비 주가\r\n            transactionVolume: company.stockInfResponseDto.acml_vol, //거래량\r\n            priceChangeRate: company.stockInfResponseDto.prdy_ctrt,// 전일 대비율\r\n            amount: company.stockInfResponseDto.acml_tr_pbmn, // 총 거래대금\r\n        };\r\n    });\r\n    return {\r\n        data: extractedData,\r\n        data2: extractedData2,\r\n        isLoading,\r\n        isError,\r\n    };\r\n}\r\n\r\nexport default useCompanyData;\r\n"],"names":["BASE_URL","useCompanyData","startCompanyId","endCompanyId","fetchData","companyId","url","axios","companyIds","_","index","data","isLoading","isError","useQuery","promises","extractedData","company","extractedData2"],"mappings":"mFAKA,MAAMA,EAAW,8BAGjB,SAASC,EAAeC,EAAwBC,EAA2C,CAGjF,MAAAC,EAAY,MAAOC,GAAsB,CAC3C,MAAMC,EAAM,GAAGN,CAAQ,gBAAgBK,CAAS,GAEhD,OADiB,MAAME,EAAM,IAAID,CAAG,GACpB,IACpB,EAGME,EAAa,MAAM,KAAK,CAAC,OAAQL,EAAeD,EAAiB,CAAI,EAAA,CAACO,EAAGC,IAAUR,EAAiBQ,CAAK,EAGzG,CAAC,KAAAC,EAAM,UAAAC,EAAW,QAAAC,CAAA,EAAWC,EAAS,CACxC,SAAU,CAAC,cAAeZ,EAAgBC,CAAY,EACtD,QAAS,SAAY,CACjB,MAAMY,EAAWP,EAAW,IAAKH,GAAcD,EAAUC,CAAS,CAAC,EAC5D,OAAA,QAAQ,IAAIU,CAAQ,CAAA,CAC/B,CACH,EAGKC,EAAgBL,GAAA,YAAAA,EAAM,IAAKM,IACtB,CACH,UAAWA,EAAQ,UACnB,KAAMA,EAAQ,KACd,QAASA,EAAQ,QACjB,WAAYA,EAAQ,oBAAoB,UACxC,kBAAmBA,EAAQ,oBAAoB,UAC/C,gBAAiBA,EAAQ,oBAAoB,SACjD,IAIEC,EAAiBP,GAAA,YAAAA,EAAM,IAAKM,IACvB,CACH,UAAWA,EAAQ,UACnB,KAAMA,EAAQ,KACd,QAASA,EAAQ,QACjB,WAAYA,EAAQ,oBAAoB,UACxC,kBAAmBA,EAAQ,oBAAoB,UAC/C,kBAAmBA,EAAQ,oBAAoB,SAC/C,gBAAiBA,EAAQ,oBAAoB,UAC7C,OAAQA,EAAQ,oBAAoB,YACxC,IAEG,MAAA,CACH,KAAMD,EACN,MAAOE,EACP,UAAAN,EACA,QAAAC,CACJ,CACJ"}