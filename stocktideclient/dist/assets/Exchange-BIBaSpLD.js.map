{"version":3,"file":"Exchange-BIBaSpLD.js","sources":["../../src/components/my/account/exchange/ExchangeComponent.tsx","../../src/pages/my/account/exchange/Exchange.tsx"],"sourcesContent":["import React, { FC, useEffect, useState } from 'react';\r\nimport { useSelector } from \"react-redux\";\r\nimport useCustomCash from \"@hooks/useCustomCash\";\r\nimport { useNavigate } from 'react-router-dom';\r\nimport styled, { keyframes } from 'styled-components';\r\nimport { ContentBottom } from \"@assets/css/content\";\r\nimport { RootState } from '@/store';\r\nimport { AccountState, ExchangeProps } from '@typings/account';\r\nimport { CashSliceState } from '@slices/cashSlice';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst initAccountState: AccountState = {\r\n    cashId: 0,\r\n    accountNumber: '',\r\n    money: 0,\r\n    dollar: 0,\r\n}\r\n\r\nconst exchangeRate  = 1386.83;\r\n\r\nconst ExchangeComponent: FC<ExchangeProps> = ({ cashId }) => {\r\n    const cashState = useSelector((state: RootState) => state.cashSlice);\r\n    const { doUpdateCash } = useCustomCash();\r\n    const [account, setAccount] = useState(initAccountState);\r\n    const [exchangeCurrency, setExchangeCurrency] = useState(\"money\");\r\n    const [exchangeAmount, setExchangeAmount] = useState(0);\r\n    const [exchangedMoney, setExchangedMoney] = useState(0);\r\n    const [exchangedDollar, setExchangedDollar] = useState(0);\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        const selectedAccount = cashState.cashList.find((cash: CashSliceState) => cash.cashId == cashId);\r\n        if (selectedAccount) {\r\n            setAccount(selectedAccount);\r\n        }\r\n    }, [cashState, cashId]);\r\n\r\n    useEffect(() => {\r\n        let newExchangedMoney = account.money;\r\n        let newExchangedDollar = account.dollar;\r\n\r\n        if (exchangeCurrency === \"money\") {\r\n            newExchangedMoney = account.money - exchangeAmount;\r\n            newExchangedDollar = account.dollar + (exchangeAmount / exchangeRate);\r\n        } else if (exchangeCurrency === \"dollar\") {\r\n            newExchangedMoney = account.money + (exchangeAmount * exchangeRate);\r\n            newExchangedDollar = account.dollar - exchangeAmount;\r\n        }\r\n\r\n        if (newExchangedDollar > 0 && newExchangedDollar < 1) {\r\n            setErrorMessage('외화량은 1보다 작을 수 없습니다.');\r\n        } else if (newExchangedMoney < 0 || newExchangedDollar < 0) {\r\n            setErrorMessage('환전 후의 금액은 0보다 작을 수 없습니다.');\r\n        } else {\r\n            setErrorMessage('');\r\n        }\r\n\r\n        setExchangedMoney(Math.floor(newExchangedMoney));\r\n        setExchangedDollar(Math.floor(newExchangedDollar));\r\n    }, [exchangeAmount, exchangeCurrency, account.money, account.dollar]);\r\n\r\n    const handleExchangeAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setExchangeAmount(Number(e.target.value));\r\n    };\r\n\r\n    const handleExchangeCurrencyChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n        setExchangeCurrency(e.target.value);\r\n    };\r\n\r\n    const handleManage = () => {\r\n        navigate(\"../manage\");\r\n    };\r\n\r\n    const handleExchange = () => {\r\n        if (errorMessage) return;\r\n\r\n        if (exchangedMoney < 0 || exchangedDollar < 0) {\r\n            toast.error(\"환전 금액이 유효하지 않습니다\");\r\n            return;\r\n        }\r\n\r\n        doUpdateCash(cashId, exchangedMoney, exchangedDollar).then(() => {\r\n            setExchangeAmount(0);\r\n            toast.success(\"환전되었습니다\");\r\n        }).catch((error) => {\r\n            toast.error(\"환전 처리 중 오류가 발생했습니다\", error);\r\n        });\r\n    };\r\n\r\n    return (\r\n        <AppContainer>\r\n            <AccountBox>\r\n                <AccountRow>\r\n                    <AccountLabel>계좌번호:</AccountLabel>\r\n                    <AccountValue>{account.accountNumber}</AccountValue>\r\n                </AccountRow>\r\n                <AccountRow>\r\n                    <AccountLabel>원화량:</AccountLabel>\r\n                    <AccountValue>{account.money}원</AccountValue>\r\n                </AccountRow>\r\n                <AccountRow>\r\n                    <AccountLabel>외화량:</AccountLabel>\r\n                    <AccountValue>{account.dollar}달러</AccountValue>\r\n                </AccountRow>\r\n                <AccountRow>\r\n                    <AccountLabel>환전 금액:</AccountLabel>\r\n                    <ChargeInput type=\"number\" value={exchangeAmount} onChange={handleExchangeAmountChange} />\r\n                </AccountRow>\r\n                {errorMessage && <ErrorMessage>{errorMessage}</ErrorMessage>}\r\n                <AccountRow>\r\n                    <AccountLabel>환전 화폐:</AccountLabel>\r\n                    <select value={exchangeCurrency} onChange={handleExchangeCurrencyChange}>\r\n                        <option value=\"money\">원화에서 외화로</option>\r\n                        <option value=\"dollar\">외화에서 원화로</option>\r\n                    </select>\r\n                </AccountRow>\r\n                <AccountRow>\r\n                    <AccountLabel>환전 후 원화량:</AccountLabel>\r\n                    <AccountValue>{exchangedMoney}원</AccountValue>\r\n                </AccountRow>\r\n                <AccountRow>\r\n                    <AccountLabel>환전 후 외화량:</AccountLabel>\r\n                    <AccountValue>{exchangedDollar}달러</AccountValue>\r\n                </AccountRow>\r\n                <ButtonContainer>\r\n                    <Button onClick={handleManage}>계좌 관리</Button>\r\n                    <Button onClick={handleExchange} disabled={Boolean(errorMessage)}>환전</Button>\r\n                </ButtonContainer>\r\n            </AccountBox>\r\n            <ContentBottom />\r\n        </AppContainer>\r\n    );\r\n};\r\n\r\nexport default ExchangeComponent;\r\n\r\nconst fadeIn = keyframes`\r\n    from {\r\n        opacity: 0;\r\n        transform: scale(0.9);\r\n    }\r\n    to {\r\n        opacity: 1;\r\n        transform: scale(1);\r\n    }\r\n`;\r\n\r\nconst AppContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    padding: 10px;\r\n`;\r\n\r\nconst AccountBox = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    border: 2px solid #ccc;\r\n    padding: 10px;\r\n    width: 100%;\r\n    margin: 10px;\r\n    border-radius: 5px;\r\n    animation: ${fadeIn} 3s;\r\n`;\r\n\r\nconst AccountRow = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    width: 100%;\r\n    margin: 5px 0;\r\n`;\r\n\r\nconst AccountLabel = styled.div`\r\n    font-weight: bold;\r\n    margin-right: 10px;\r\n`;\r\n\r\nconst AccountValue = styled.div`\r\n    margin-left: auto;\r\n`;\r\n\r\nconst ChargeInput = styled.input`\r\n    width: 60%;\r\n    padding: 5px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 5px;\r\n`;\r\n\r\nconst ErrorMessage = styled.div`\r\n    color: red;\r\n    font-size: 12px;\r\n    margin-top: 5px;\r\n`;\r\n\r\nconst ButtonContainer = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    width: 100%;\r\n`;\r\n\r\nconst Button = styled.button`\r\n    height: 40px;\r\n    width: 45%;\r\n    margin: 5px;\r\n    padding: 5px;\r\n    border: 2px solid #0056b3;\r\n    color: #0056b3;\r\n    cursor: pointer;\r\n    border-radius: 5px;\r\n\r\n    &:hover {\r\n        background-color: #0056b3;\r\n        color: white;\r\n    }\r\n\r\n    &:disabled {\r\n        background-color: gray;\r\n        color: white;\r\n        cursor: not-allowed;\r\n    }\r\n`;\r\n","import { useParams } from 'react-router';\r\nimport ExchangeComponent from '@components/my/account/exchange/ExchangeComponent';\r\n\r\nconst Charge = () => {\r\n    const {cashId} = useParams()\r\n\r\n    return (\r\n      <ExchangeComponent cashId={Number(cashId)}/>\r\n    );\r\n};\r\n\r\nexport default Charge;"],"names":["initAccountState","exchangeRate","ExchangeComponent","cashId","cashState","useSelector","state","doUpdateCash","useCustomCash","account","setAccount","useState","exchangeCurrency","setExchangeCurrency","exchangeAmount","setExchangeAmount","exchangedMoney","setExchangedMoney","exchangedDollar","setExchangedDollar","errorMessage","setErrorMessage","navigate","useNavigate","useEffect","selectedAccount","cash","newExchangedMoney","newExchangedDollar","handleExchangeAmountChange","e","handleExchangeCurrencyChange","handleManage","handleExchange","toast","error","AppContainer","jsxs","AccountBox","AccountRow","jsx","AccountLabel","AccountValue","ChargeInput","ErrorMessage","ButtonContainer","Button","ContentBottom","fadeIn","keyframes","styled","Charge","useParams"],"mappings":"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"}