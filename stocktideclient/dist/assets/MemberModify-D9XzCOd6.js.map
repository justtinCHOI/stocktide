{"version":3,"file":"MemberModify-D9XzCOd6.js","sources":["../../src/components/my/modify/MemberModifyComponent.tsx","../../src/pages/my/modify/MemberModify.tsx"],"sourcesContent":["import React, { useEffect, useState, useRef, FC } from 'react';\r\nimport {FaEye, FaEyeSlash} from 'react-icons/fa';\r\nimport useCustomMember from \"@hooks/useCustomMember\";\r\nimport { modifyMember, checkEmailDuplicate } from \"@api/memberApi\";\r\nimport ResultModal from \"@components/common/ResultModal\";\r\nimport {\r\n    Button,\r\n    Container,\r\n    ContentBottom,\r\n    ErrorMessage,\r\n    FormRow,\r\n    Icon,\r\n    Input,\r\n    InputWrapper,\r\n    Label\r\n} from \"@assets/css/content\";\r\nimport { MemberState } from '@typings/member';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst initState = {\r\n    memberId : 0,\r\n    name : '',\r\n    email: '',\r\n    password: '',\r\n    confirmPassword: '',\r\n}\r\n\r\nconst MemberModifyComponent: FC = () => {\r\n\r\n    const [member, setMember] = useState<MemberState>(initState)\r\n    const { loginState: loginInfo } = useCustomMember();\r\n    const [emailError, setEmailError] = useState('')\r\n    const [passwordError, setPasswordError] = useState('')\r\n    const [result, setResult] = useState<string | null>()\r\n    const [showPassword, setShowPassword] = useState(false)\r\n    const [showConfirmPassword, setShowConfirmPassword] = useState(false)\r\n\r\n    const {doLogout, moveToLogin} = useCustomMember()\r\n\r\n    const nameInputRef = useRef<HTMLInputElement>(null);\r\n    const emailInputRef = useRef<HTMLInputElement>(null);\r\n    const passwordInputRef = useRef<HTMLInputElement>(null);\r\n    const confirmPasswordInputRef = useRef<HTMLInputElement>(null);\r\n\r\n    useEffect(() => {\r\n        setMember({...loginInfo})\r\n    },[loginInfo])\r\n\r\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const { name, value } = e.target;\r\n        setMember(prev => ({\r\n            ...prev,\r\n            [name]: value\r\n        }));\r\n\r\n        if (e.target.name === 'email') {\r\n            handleEmailChange(e.target.value).then()\r\n        } else if (e.target.name === 'confirmPassword') {\r\n            handlePasswordChange()\r\n        }\r\n    }\r\n\r\n    const handleEmailChange = async (email: string) => {\r\n        try {\r\n            const isDuplicate = await checkEmailDuplicate(email)\r\n            if (isDuplicate) {\r\n                setEmailError('이미 사용 중인 이메일입니다.')\r\n            } else {\r\n                setEmailError('')\r\n            }\r\n        } catch (error) {\r\n            console.error('이메일 중복 검사 중 오류가 발생했습니다.', error)\r\n            setEmailError('이메일 중복 검사 중 오류가 발생했습니다.')\r\n        }\r\n    }\r\n\r\n    const handlePasswordChange = () => {\r\n        if (member.password !== member.confirmPassword) {\r\n            setPasswordError('비밀번호가 일치하지 않습니다.')\r\n        } else {\r\n            setPasswordError('')\r\n        }\r\n    }\r\n\r\n    const handleClickModify = () => {\r\n        if (!member.name) {\r\n            alert('이름을 입력해 주세요.')\r\n            nameInputRef.current!.focus()\r\n            return\r\n        }\r\n\r\n        if (!member.email) {\r\n            alert('이메일을 입력해 주세요.')\r\n            emailInputRef.current!.focus()\r\n            return\r\n        }\r\n\r\n        if (!member.password) {\r\n            alert('비밀번호를 입력해 주세요.')\r\n            passwordInputRef.current!.focus()\r\n            return\r\n        }\r\n\r\n        if (!member.confirmPassword) {\r\n            alert('비밀번호를 입력해 주세요.')\r\n            confirmPasswordInputRef.current!.focus()\r\n            return\r\n        }\r\n\r\n        if (emailError) {\r\n            alert('이메일을 확인해 주세요.')\r\n            emailInputRef.current!.focus()\r\n            return\r\n        }\r\n\r\n        if (passwordError) {\r\n            alert('비밀번호가 일치하지 않습니다.')\r\n            confirmPasswordInputRef.current!.focus()\r\n            return\r\n        }\r\n\r\n        const MemberModifyDTO = {\r\n            memberId : member.memberId,\r\n            name : member.name,\r\n            email: member.email,\r\n            password: member.password,\r\n        }\r\n\r\n        modifyMember(MemberModifyDTO).then(() => {\r\n            setResult('Modified')\r\n        })\r\n    }\r\n\r\n    const closeModal = () => {\r\n        setResult(null)\r\n        doLogout()\r\n        toast.info(\"로그아웃되었습니다\");\r\n        moveToLogin()\r\n    }\r\n\r\n    const toggleShowPassword = () => {\r\n        setShowPassword(!showPassword)\r\n    }\r\n\r\n    const toggleShowConfirmPassword = () => {\r\n        setShowConfirmPassword(!showConfirmPassword)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                {result && <ResultModal title={'회원정보'} content={'정보수정완료'} callbackFn={closeModal}/>}\r\n\r\n                <FormRow>\r\n                    <Label>이름</Label>\r\n                    <Input\r\n                        name=\"name\"\r\n                        type=\"text\"\r\n                        value={member.name}\r\n                        onChange={handleChange}\r\n                        ref={nameInputRef}\r\n                    />\r\n                </FormRow>\r\n\r\n                <FormRow>\r\n                    <Label>이메일</Label>\r\n                    <Input\r\n                        name=\"email\"\r\n                        type=\"email\"\r\n                        value={member.email}\r\n                        onChange={handleChange}\r\n                        ref={emailInputRef}\r\n                    />\r\n                    {emailError && <ErrorMessage>{emailError}</ErrorMessage>}\r\n                </FormRow>\r\n\r\n                <FormRow>\r\n                    <Label>비밀번호</Label>\r\n                    <InputWrapper>\r\n                        <Input\r\n                            name=\"password\"\r\n                            type={showPassword ? \"text\" : \"password\"}\r\n                            value={member.password}\r\n                            onChange={handleChange}\r\n                            ref={passwordInputRef}\r\n                        />\r\n                        <Icon onClick={toggleShowPassword}>\r\n                            {showPassword ? <FaEyeSlash /> : <FaEye />}\r\n                        </Icon>\r\n                    </InputWrapper>\r\n                </FormRow>\r\n\r\n                <FormRow>\r\n                    <Label>비밀번호 재확인</Label>\r\n                    <InputWrapper>\r\n                        <Input\r\n                            name=\"confirmPassword\"\r\n                            type={showConfirmPassword ? \"text\" : \"password\"}\r\n                            onChange={handleChange}\r\n                            ref={confirmPasswordInputRef}\r\n                        />\r\n                        <Icon onClick={toggleShowConfirmPassword}>\r\n                            {showConfirmPassword ? <FaEyeSlash /> : <FaEye />}\r\n                        </Icon>\r\n                    </InputWrapper>\r\n                    {passwordError && <ErrorMessage>{passwordError}</ErrorMessage>}\r\n                </FormRow>\r\n\r\n                <FormRow style={{justifyContent: 'end'}}>\r\n                    <Button type=\"button\" onClick={handleClickModify}>\r\n                        Modify\r\n                    </Button>\r\n                </FormRow>\r\n            </Container>\r\n            <ContentBottom/>\r\n        </>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default MemberModifyComponent;\r\n\r\n","import MemberModifyComponent from '@components/my/modify/MemberModifyComponent';\r\n\r\nconst MemberModify = () => {\r\n  return (\r\n              <MemberModifyComponent/>\r\n  )\r\n      ;\r\n}\r\n\r\nexport default MemberModify;\r\n"],"names":["initState","MemberModifyComponent","member","setMember","useState","loginInfo","useCustomMember","emailError","setEmailError","passwordError","setPasswordError","result","setResult","showPassword","setShowPassword","showConfirmPassword","setShowConfirmPassword","doLogout","moveToLogin","nameInputRef","useRef","emailInputRef","passwordInputRef","confirmPasswordInputRef","useEffect","handleChange","e","name","value","prev","handleEmailChange","handlePasswordChange","email","isDuplicate","checkEmailDuplicate","error","handleClickModify","MemberModifyDTO","modifyMember","closeModal","toast","toggleShowPassword","toggleShowConfirmPassword","jsxs","Fragment","Container","ResultModal","FormRow","jsx","Label","Input","ErrorMessage","InputWrapper","Icon","FaEyeSlash","FaEye","Button","ContentBottom","MemberModify"],"mappings":"4XAmBA,MAAMA,EAAY,CACd,SAAW,EACX,KAAO,GACP,MAAO,GACP,SAAU,GACV,gBAAiB,EACrB,EAEMC,EAA4B,IAAM,CAEpC,KAAM,CAACC,EAAQC,CAAS,EAAIC,EAAAA,SAAsBJ,CAAS,EACrD,CAAE,WAAYK,CAAU,EAAIC,EAAgB,EAC5C,CAACC,EAAYC,CAAa,EAAIJ,EAAAA,SAAS,EAAE,EACzC,CAACK,EAAeC,CAAgB,EAAIN,EAAAA,SAAS,EAAE,EAC/C,CAACO,EAAQC,CAAS,EAAIR,WAAwB,EAC9C,CAACS,EAAcC,CAAe,EAAIV,EAAAA,SAAS,EAAK,EAChD,CAACW,EAAqBC,CAAsB,EAAIZ,EAAAA,SAAS,EAAK,EAE9D,CAAC,SAAAa,EAAU,YAAAC,CAAW,EAAIZ,EAAgB,EAE1Ca,EAAeC,SAAyB,IAAI,EAC5CC,EAAgBD,SAAyB,IAAI,EAC7CE,EAAmBF,SAAyB,IAAI,EAChDG,EAA0BH,SAAyB,IAAI,EAE7DI,EAAAA,UAAU,IAAM,CACFrB,EAAA,CAAC,GAAGE,EAAU,CAAA,EAC1B,CAACA,CAAS,CAAC,EAEP,MAAAoB,EAAgBC,GAA2C,CAC7D,KAAM,CAAE,KAAAC,EAAM,MAAAC,CAAM,EAAIF,EAAE,OAC1BvB,EAAmB0B,IAAA,CACf,GAAGA,EACH,CAACF,CAAI,EAAGC,CAAA,EACV,EAEEF,EAAE,OAAO,OAAS,QAClBI,EAAkBJ,EAAE,OAAO,KAAK,EAAE,KAAK,EAChCA,EAAE,OAAO,OAAS,mBACJK,EAAA,CAE7B,EAEMD,EAAoB,MAAOE,GAAkB,CAC3C,GAAA,CACM,MAAAC,EAAc,MAAMC,EAAoBF,CAAK,EAE/CxB,EADAyB,EACc,mBAEA,EAFkB,QAI/BE,EAAO,CACJ,QAAA,MAAM,0BAA2BA,CAAK,EAC9C3B,EAAc,yBAAyB,CAAA,CAE/C,EAEMuB,EAAuB,IAAM,CAC3B7B,EAAO,WAAaA,EAAO,gBAC3BQ,EAAiB,kBAAkB,EAEnCA,EAAiB,EAAE,CAE3B,EAEM0B,EAAoB,IAAM,CACxB,GAAA,CAAClC,EAAO,KAAM,CACd,MAAM,cAAc,EACpBiB,EAAa,QAAS,MAAM,EAC5B,MAAA,CAGA,GAAA,CAACjB,EAAO,MAAO,CACf,MAAM,eAAe,EACrBmB,EAAc,QAAS,MAAM,EAC7B,MAAA,CAGA,GAAA,CAACnB,EAAO,SAAU,CAClB,MAAM,gBAAgB,EACtBoB,EAAiB,QAAS,MAAM,EAChC,MAAA,CAGA,GAAA,CAACpB,EAAO,gBAAiB,CACzB,MAAM,gBAAgB,EACtBqB,EAAwB,QAAS,MAAM,EACvC,MAAA,CAGJ,GAAIhB,EAAY,CACZ,MAAM,eAAe,EACrBc,EAAc,QAAS,MAAM,EAC7B,MAAA,CAGJ,GAAIZ,EAAe,CACf,MAAM,kBAAkB,EACxBc,EAAwB,QAAS,MAAM,EACvC,MAAA,CAGJ,MAAMc,EAAkB,CACpB,SAAWnC,EAAO,SAClB,KAAOA,EAAO,KACd,MAAOA,EAAO,MACd,SAAUA,EAAO,QACrB,EAEaoC,EAAAD,CAAe,EAAE,KAAK,IAAM,CACrCzB,EAAU,UAAU,CAAA,CACvB,CACL,EAEM2B,EAAa,IAAM,CACrB3B,EAAU,IAAI,EACLK,EAAA,EACTuB,EAAM,KAAK,WAAW,EACVtB,EAAA,CAChB,EAEMuB,EAAqB,IAAM,CAC7B3B,EAAgB,CAACD,CAAY,CACjC,EAEM6B,EAA4B,IAAM,CACpC1B,EAAuB,CAACD,CAAmB,CAC/C,EAEA,OAEQ4B,EAAA,KAAAC,WAAA,CAAA,SAAA,CAAAD,OAACE,EACI,CAAA,SAAA,CAAAlC,SAAWmC,EAAY,CAAA,MAAO,OAAQ,QAAS,SAAU,WAAYP,EAAW,SAEhFQ,EACG,CAAA,SAAA,CAAAC,EAAAA,IAACC,GAAM,SAAE,IAAA,CAAA,EACTD,EAAA,IAACE,EAAA,CACG,KAAK,OACL,KAAK,OACL,MAAOhD,EAAO,KACd,SAAUuB,EACV,IAAKN,CAAA,CAAA,CACT,EACJ,SAEC4B,EACG,CAAA,SAAA,CAAAC,EAAAA,IAACC,GAAM,SAAG,KAAA,CAAA,EACVD,EAAA,IAACE,EAAA,CACG,KAAK,QACL,KAAK,QACL,MAAOhD,EAAO,MACd,SAAUuB,EACV,IAAKJ,CAAA,CACT,EACCd,GAAeyC,EAAAA,IAAAG,EAAA,CAAc,SAAW5C,CAAA,CAAA,CAAA,EAC7C,SAECwC,EACG,CAAA,SAAA,CAAAC,EAAAA,IAACC,GAAM,SAAI,MAAA,CAAA,SACVG,EACG,CAAA,SAAA,CAAAJ,EAAA,IAACE,EAAA,CACG,KAAK,WACL,KAAMrC,EAAe,OAAS,WAC9B,MAAOX,EAAO,SACd,SAAUuB,EACV,IAAKH,CAAA,CACT,EACA0B,EAAAA,IAACK,EAAK,CAAA,QAASZ,EACV,SAAA5B,QAAgByC,EAAW,CAAA,CAAA,EAAMN,EAAA,IAAAO,EAAA,CAAM,CAAA,CAC5C,CAAA,CAAA,CACJ,CAAA,CAAA,EACJ,SAECR,EACG,CAAA,SAAA,CAAAC,EAAAA,IAACC,GAAM,SAAQ,UAAA,CAAA,SACdG,EACG,CAAA,SAAA,CAAAJ,EAAA,IAACE,EAAA,CACG,KAAK,kBACL,KAAMnC,EAAsB,OAAS,WACrC,SAAUU,EACV,IAAKF,CAAA,CACT,EACAyB,EAAAA,IAACK,EAAK,CAAA,QAASX,EACV,SAAA3B,QAAuBuC,EAAW,CAAA,CAAA,EAAMN,EAAA,IAAAO,EAAA,CAAM,CAAA,CACnD,CAAA,CAAA,EACJ,EACC9C,GAAkBuC,EAAAA,IAAAG,EAAA,CAAc,SAAc1C,CAAA,CAAA,CAAA,EACnD,EAECuC,EAAA,IAAAD,EAAA,CAAQ,MAAO,CAAC,eAAgB,KAAK,EAClC,SAACC,EAAAA,IAAAQ,EAAA,CAAO,KAAK,SAAS,QAASpB,EAAmB,kBAElD,CACJ,CAAA,CAAA,EACJ,QACCqB,EAAa,CAAA,CAAA,CAAA,EAClB,CAGR,ECxNMC,GAAe,UAENzD,EAAqB,EAAA"}