{"version":3,"file":"Charge-C-rnbkwi.js","sources":["../../src/api/paymentApi.ts","../../src/components/my/account/charge/ChargeComponent.tsx","../../src/pages/my/account/charge/Charge.tsx"],"sourcesContent":["import { toast } from 'react-toastify';\r\n\r\ninterface PaymentWindow {\r\n    IMP?: any;\r\n}\r\n\r\n// IMP 객체가 로드될 때까지 대기\r\nconst loadIMP = () => {\r\n    return new Promise((resolve) => {\r\n        if (window.IMP) {\r\n            resolve(window.IMP);\r\n        } else {\r\n            // IMP가 로드될 때까지 주기적으로 체크\r\n            const interval = setInterval(() => {\r\n                if (window.IMP) {\r\n                    clearInterval(interval);\r\n                    resolve(window.IMP);\r\n                }\r\n            }, 300);\r\n        }\r\n    });\r\n};\r\n\r\ndeclare const window: PaymentWindow;\r\n\r\n// Payment 관련 타입 정의\r\ninterface PaymentData {\r\n    total_price: number;\r\n    address: string;\r\n    phone: string;\r\n}\r\n\r\ninterface PaymentResponse {\r\n    code: number;\r\n    msg: string;\r\n}\r\n\r\ninterface PaymentSuccessResponse {\r\n    success: boolean;\r\n    // 기타 결제 성공시 필요한 응답 필드들\r\n    [key: string]: any;\r\n}\r\n\r\n// const payBtn = document.getElementById('payBtn');\r\n//\r\n// if (payBtn) {\r\n//     payBtn.addEventListener('click', () => {\r\n//         requestPay();\r\n//     });\r\n// }\r\n//\r\n// function calculateAmount(priceElements: NodeListOf<Element>): number {\r\n//     return Array.from(priceElements).reduce((sum, price) => {\r\n//         const priceText = price.textContent || '0';\r\n//         return sum + parseInt(priceText.replace(/[^0-9]/g, ''), 10);\r\n//     }, 0);\r\n// }\r\n\r\nfunction generateUniqueNumber() {\r\n    // 현재 시간을 이용하여 고유한 숫자 생성\r\n    const timestamp = Date.now();\r\n\r\n    // Math.random()을 이용하여 무작위 숫자 생성\r\n    const randomValue = Math.random();\r\n\r\n    // 위의 두 값을 조합하여 고유한 일련번호 생성\r\n    return `${timestamp}-${randomValue}`;\r\n}\r\n\r\nexport function requestPay(chargedMoney: number) {\r\n\r\n\r\n    loadIMP().then((IMP: any) => {\r\n        IMP.init('imp76806111'); // 결제 연동 준비\r\n\r\n        // let prices = document.querySelectorAll('.price');\r\n        // const amount = calculateAmount(prices);\r\n\r\n        const amount = chargedMoney;\r\n\r\n        let buyer_email, buyer_phone, buyer_name, address, detailAddress;\r\n\r\n        // const buyerEmailElement = document.getElementById('email') as HTMLInputElement;\r\n        // const buyerPhoneElement = document.getElementById('phone-num') as HTMLInputElement;\r\n        // const buyerNameElement = document.getElementById('name') as HTMLInputElement;\r\n        // const addressElement = document.getElementById('address') as HTMLInputElement;\r\n        // const detailAddressElement = document.getElementById('detailAddress') as HTMLInputElement;\r\n        //\r\n        // if (!buyerEmailElement || !buyerPhoneElement || !buyerNameElement ||\r\n        //   !addressElement || !detailAddressElement) {\r\n        //     console.error('Required form elements not found');\r\n        //     return;\r\n        // }\r\n        // buyer_email = buyerEmailElement.value;\r\n        // buyer_phone = buyerPhoneElement.value;\r\n        // buyer_name = buyerNameElement.value;\r\n        // address = addressElement.value;\r\n        // detailAddress = detailAddressElement.value;\r\n\r\n        buyer_email = 'nicolaochoi@naver.com';\r\n        buyer_phone = '01074991534';\r\n        buyer_name = '최정의';\r\n        address = '서울';\r\n        detailAddress = '특별시';\r\n\r\n        let fullAddress = address + ' ' + detailAddress;\r\n\r\n        let company_name = \"StockTide\";\r\n\r\n        const data2 = {\r\n            total_price : amount,\r\n            address : address,\r\n            phone : buyer_phone,\r\n        };\r\n\r\n        console.log(data2);\r\n\r\n        fetch(\"/api/POST/checkPayment\", {\r\n            method: 'POST', // 요청 방식 설정\r\n            mode: 'cors',\r\n            headers: {\r\n                'Content-Type': 'application/json', // 내용 타입을 JSON으로 지정\r\n            },\r\n            body: JSON.stringify(data2)\r\n        })\r\n            .then(response => {\r\n                if (!response.ok) { // 응답 상태가 OK가 아닐 경우 에러 처리\r\n                    alert(\"인터넷 이슈!!\");\r\n                    throw new Error('Network response was not ok');\r\n                }\r\n                console.log('response',response);\r\n                return response.json(); // 응답 본문을 JSON으로 변환\r\n            })\r\n            .then(data => {\r\n                // 서버로부터 받은 데이터 처리\r\n                console.log('data.code',data.code);\r\n                if(data.code === 666){\r\n                    alert(data.msg);\r\n                    location.href=\"/logins\"\r\n                }\r\n                if(data.code === 400) {\r\n                    alert(data.msg);\r\n                    location.href = \"/main\"\r\n                }\r\n                if(data.code === 500){\r\n                    alert(data.msg);\r\n                    location.href=\"/cart\"\r\n                }\r\n                if (data.code === 200) {\r\n                    alert(\"카카오페이가 떠야해\");\r\n                    IMP.request_pay({\r\n                            pg: \"kcp.{상점ID}\",\r\n                            pay_method: \"card\",\r\n                            merchant_uid: generateUniqueNumber(),   // 주문번호\r\n                            name: company_name,\r\n                            amount: amount,                         // 숫자 타입\r\n                            buyer_email: buyer_email,\r\n                            buyer_name: buyer_name,\r\n                            buyer_tel: buyer_phone,\r\n                            buyer_addr: fullAddress,\r\n                            buyer_postcode: \"01181\"\r\n                        },\r\n                        function (rsp:PaymentSuccessResponse) { // callback\r\n                            if (rsp.success) {\r\n                                console.log(data);\r\n                                // sendData(\"/api/POST/payment\", data2, paymentSuccess, null)\r\n                                sendData(\"/api/POST/payment\", data2)\r\n                                paymentSuccess();\r\n                            } else {\r\n                                console.log(rsp);\r\n                            }\r\n                        });\r\n                } else {\r\n                    handlePaymentResponse(data);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.error('There was a problem with your fetch operation:', error);\r\n            });\r\n        console.log(amount)\r\n\r\n        // 나머지 기존 코드\r\n    }).catch(error => {\r\n        console.error('Failed to initialize IMP:', error);\r\n        toast.error('결제 모듈 초기화에 실패했습니다.');\r\n    });\r\n}\r\n\r\nconst paymentSuccess = () =>{\r\n    location.href = \"/cart\"\r\n}\r\n\r\nasync function sendData(url: string, data: PaymentData): Promise<void> {\r\n    try {\r\n        await fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(data)\r\n        });\r\n    } catch (error) {\r\n        console.error('Failed to send payment data:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nfunction handlePaymentResponse(response: PaymentResponse): void {\r\n    switch (response.code) {\r\n        case 666:\r\n            alert(response.msg);\r\n            location.href = \"/logins\";\r\n            break;\r\n        case 400:\r\n            alert(response.msg);\r\n            location.href = \"/main\";\r\n            break;\r\n        case 500:\r\n            alert(response.msg);\r\n            location.href = \"/cart\";\r\n            break;\r\n    }\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useSelector } from \"react-redux\";\r\nimport useCustomCash from \"@hooks/useCustomCash\"\r\nimport { useNavigate } from 'react-router-dom';\r\nimport styled, { keyframes } from 'styled-components';\r\nimport { ContentBottom } from \"@assets/css/content\";\r\nimport {requestPay} from \"@api/paymentApi\";\r\nimport { AccountState, ChargeProps } from '@typings/account';\r\nimport { RootState } from '@/store';\r\nimport { CashSliceState } from '@slices/cashSlice';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst initAccountState: AccountState = {\r\n    cashId: 0,\r\n    accountNumber: '',\r\n    money: 0,\r\n    dollar: 0,\r\n}\r\n\r\nconst ChargeComponent: React.FC<ChargeProps> = ({ cashId }) => {\r\n    const cashState = useSelector((state: RootState) => state.cashSlice);\r\n    const { doUpdateCash } = useCustomCash();\r\n    const [account, setAccount] = useState<AccountState>(initAccountState);\r\n    const [chargeAmount, setChargeAmount] = useState<number | undefined>(0);\r\n    const [chargedMoney, setChargedMoney] = useState<number>(0);\r\n    const [isCharged, setIsCharged] = useState<boolean>(false);\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        const accountMoneyNumber = account.money || 0;\r\n        const chargeAmountNumber = chargeAmount || 0;\r\n        setChargedMoney(accountMoneyNumber + chargeAmountNumber);\r\n    }, [chargeAmount])\r\n\r\n\r\n    useEffect(() => {\r\n        const selectedAccount = cashState.cashList.find((cash: CashSliceState) => cash.cashId == cashId);\r\n        if (selectedAccount) {\r\n            setAccount(selectedAccount);\r\n        }\r\n    }, [cashState, cashId]);\r\n\r\n    const handleChargeAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if(!e.target.value) {\r\n            setChargeAmount(undefined);\r\n        }else{\r\n            setChargeAmount(Number(e.target.value));\r\n        }\r\n    };\r\n\r\n    const handleCharge = () => {\r\n        if (chargeAmount == undefined || chargeAmount <= 0) {\r\n            toast.error(\"충전 금액을 확인해주세요\");\r\n            return;\r\n        }else{\r\n            doUpdateCash(cashId, chargedMoney, 0).then(() => {\r\n                setIsCharged(true);\r\n                setChargeAmount(0);\r\n                try {\r\n                    requestPay(chargedMoney);\r\n                    toast.success(\"충전되었습니다\");\r\n                } catch (error) {\r\n                    toast.error(\"결제 모듈 초기화에 실패했습니다\");\r\n                }\r\n            }).catch(() => {\r\n                toast.error(\"충전 처리 중 오류가 발생했습니다\");\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleManage = () => {\r\n        navigate(\"../manage\");\r\n    };\r\n\r\n    return (\r\n        <AppContainer>\r\n            <AccountBox>\r\n                <AccountRow>\r\n                    <AccountLabel>계좌번호:</AccountLabel>\r\n                    <AccountValue>{account.accountNumber}</AccountValue>\r\n                </AccountRow>\r\n                <AccountRow>\r\n                    <AccountLabel>원화량:</AccountLabel>\r\n                    <AccountValue>{account.money}원</AccountValue>\r\n                </AccountRow>\r\n                <AccountRow>\r\n                    <AccountLabel>외화량:</AccountLabel>\r\n                    <AccountValue>{account.dollar}달러</AccountValue>\r\n                </AccountRow>\r\n                <AccountRow>\r\n                    <AccountLabel>충전 금액:</AccountLabel>\r\n                    <ChargeInput type=\"number\" value={(chargeAmount || '')} onChange={handleChargeAmountChange}/>\r\n                </AccountRow>\r\n                <AccountRow>\r\n                    <AccountLabel>충전 후 금액:</AccountLabel>\r\n                    <AccountValue style={{color: isCharged ? 'black' : 'gray'}}>{chargedMoney}원</AccountValue>\r\n                </AccountRow>\r\n                <ButtonContainer>\r\n                    <Button onClick={handleManage}>계좌 관리</Button>\r\n                    <Button onClick={handleCharge}>충전</Button>\r\n                </ButtonContainer>\r\n            </AccountBox>\r\n            <ContentBottom/>\r\n        </AppContainer>\r\n    );\r\n};\r\n\r\nexport default ChargeComponent;\r\n\r\nconst fadeIn = keyframes`\r\n    from {\r\n        opacity: 0;\r\n        transform: scale(0.9);\r\n    }\r\n    to {\r\n        opacity: 1;\r\n        transform: scale(1);\r\n    }\r\n`;\r\n\r\nconst AppContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    padding: 10px;\r\n`;\r\n\r\nconst AccountBox = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    border: 2px solid #ccc;\r\n    padding: 10px;\r\n    margin: 10px;\r\n    width: 100%;\r\n    border-radius: 5px;\r\n    animation: ${fadeIn} 3s;\r\n`;\r\n\r\nconst AccountRow = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    width: 100%;\r\n    margin: 5px 0;\r\n`;\r\n\r\nconst AccountLabel = styled.div`\r\n    font-weight: bold;\r\n    margin-right: 10px;\r\n`;\r\n\r\nconst AccountValue = styled.div`\r\n    margin-left: auto;\r\n`;\r\n\r\nconst ChargeInput = styled.input`\r\n    width: 60%;\r\n    padding: 5px;\r\n    border: 1px solid #ccc;\r\n    border-radius: 5px;\r\n`;\r\n\r\nconst ButtonContainer = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    width: 100%;\r\n`;\r\n\r\nconst Button = styled.button`\r\n    height: 40px;\r\n    width: 45%;\r\n    margin: 5px;\r\n    padding: 5px;\r\n    border: 2px solid #0056b3;\r\n    color: #0056b3;\r\n    cursor: pointer;\r\n    border-radius: 5px;\r\n\r\n    &:hover {\r\n        background-color: #0056b3;\r\n        color: white;\r\n    }\r\n\r\n    &:disabled {\r\n        background-color: gray;\r\n        color: white;\r\n        cursor: not-allowed;\r\n    }\r\n`;\r\n","import ChargeComponent from '@components/my/account/charge/ChargeComponent';\nimport { useParams } from 'react-router';\n\nconst Charge = () => {\n  const {cashId} = useParams()\n\n  return (\n    <ChargeComponent cashId={Number(cashId)}/>\n  );\n};\n\nexport default Charge;"],"names":["loadIMP","resolve","interval","generateUniqueNumber","timestamp","randomValue","requestPay","chargedMoney","IMP","amount","buyer_email","buyer_phone","buyer_name","address","detailAddress","fullAddress","company_name","data2","response","data","rsp","sendData","paymentSuccess","handlePaymentResponse","error","toast","url","initAccountState","ChargeComponent","cashId","cashState","useSelector","state","doUpdateCash","useCustomCash","account","setAccount","useState","chargeAmount","setChargeAmount","setChargedMoney","isCharged","setIsCharged","navigate","useNavigate","useEffect","accountMoneyNumber","selectedAccount","cash","handleChargeAmountChange","e","handleCharge","handleManage","AppContainer","jsxs","AccountBox","AccountRow","jsx","AccountLabel","AccountValue","ChargeInput","ButtonContainer","Button","ContentBottom","fadeIn","keyframes","styled","Charge","useParams"],"mappings":"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"}