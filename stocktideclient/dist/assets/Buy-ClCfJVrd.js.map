{"version":3,"file":"Buy-ClCfJVrd.js","sources":["../../node_modules/@tanstack/query-core/build/modern/mutationObserver.js","../../node_modules/@tanstack/react-query/build/modern/useMutation.js","../../src/hooks/useTradeStock.ts","../../src/components/stock/domestic/detail/buy/StockPrice.tsx","../../src/components/stock/domestic/detail/buy/StockPriceList.tsx","../../src/components/stock/domestic/detail/buy/PriceSetting.tsx","../../src/hooks/useGetCash.ts","../../src/hooks/useGetHoldingStock.ts","../../src/components/stock/domestic/detail/buy/VolumeSetting.tsx","../../src/components/stock/domestic/detail/buy/OrderDecisionBtn.tsx","../../src/components/stock/domestic/detail/buy/StockOrderSetting.tsx","../../src/components/stock/domestic/detail/buy/StockOrder.tsx","../../src/components/common/LoginRequestIndicator.tsx","../../src/components/stock/domestic/detail/buy/BuyComponent.tsx","../../src/pages/stock/domestic/detail/buy/Buy.tsx"],"sourcesContent":["// src/mutationObserver.ts\nimport { getDefaultState } from \"./mutation.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { Subscribable } from \"./subscribable.js\";\nimport { hashKey, shallowEqualObjects } from \"./utils.js\";\nvar MutationObserver = class extends Subscribable {\n  #client;\n  #currentResult = void 0;\n  #currentMutation;\n  #mutateOptions;\n  constructor(client, options) {\n    super();\n    this.#client = client;\n    this.setOptions(options);\n    this.bindMethods();\n    this.#updateResult();\n  }\n  bindMethods() {\n    this.mutate = this.mutate.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n  setOptions(options) {\n    const prevOptions = this.options;\n    this.options = this.#client.defaultMutationOptions(options);\n    if (!shallowEqualObjects(this.options, prevOptions)) {\n      this.#client.getMutationCache().notify({\n        type: \"observerOptionsUpdated\",\n        mutation: this.#currentMutation,\n        observer: this\n      });\n    }\n    if (prevOptions?.mutationKey && this.options.mutationKey && hashKey(prevOptions.mutationKey) !== hashKey(this.options.mutationKey)) {\n      this.reset();\n    } else if (this.#currentMutation?.state.status === \"pending\") {\n      this.#currentMutation.setOptions(this.options);\n    }\n  }\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.#currentMutation?.removeObserver(this);\n    }\n  }\n  onMutationUpdate(action) {\n    this.#updateResult();\n    this.#notify(action);\n  }\n  getCurrentResult() {\n    return this.#currentResult;\n  }\n  reset() {\n    this.#currentMutation?.removeObserver(this);\n    this.#currentMutation = void 0;\n    this.#updateResult();\n    this.#notify();\n  }\n  mutate(variables, options) {\n    this.#mutateOptions = options;\n    this.#currentMutation?.removeObserver(this);\n    this.#currentMutation = this.#client.getMutationCache().build(this.#client, this.options);\n    this.#currentMutation.addObserver(this);\n    return this.#currentMutation.execute(variables);\n  }\n  #updateResult() {\n    const state = this.#currentMutation?.state ?? getDefaultState();\n    this.#currentResult = {\n      ...state,\n      isPending: state.status === \"pending\",\n      isSuccess: state.status === \"success\",\n      isError: state.status === \"error\",\n      isIdle: state.status === \"idle\",\n      mutate: this.mutate,\n      reset: this.reset\n    };\n  }\n  #notify(action) {\n    notifyManager.batch(() => {\n      if (this.#mutateOptions && this.hasListeners()) {\n        const variables = this.#currentResult.variables;\n        const context = this.#currentResult.context;\n        if (action?.type === \"success\") {\n          this.#mutateOptions.onSuccess?.(action.data, variables, context);\n          this.#mutateOptions.onSettled?.(action.data, null, variables, context);\n        } else if (action?.type === \"error\") {\n          this.#mutateOptions.onError?.(action.error, variables, context);\n          this.#mutateOptions.onSettled?.(\n            void 0,\n            action.error,\n            variables,\n            context\n          );\n        }\n      }\n      this.listeners.forEach((listener) => {\n        listener(this.#currentResult);\n      });\n    });\n  }\n};\nexport {\n  MutationObserver\n};\n//# sourceMappingURL=mutationObserver.js.map","\"use client\";\n\n// src/useMutation.ts\nimport * as React from \"react\";\nimport { MutationObserver, notifyManager } from \"@tanstack/query-core\";\nimport { useQueryClient } from \"./QueryClientProvider.js\";\nimport { noop, shouldThrowError } from \"./utils.js\";\nfunction useMutation(options, queryClient) {\n  const client = useQueryClient(queryClient);\n  const [observer] = React.useState(\n    () => new MutationObserver(\n      client,\n      options\n    )\n  );\n  React.useEffect(() => {\n    observer.setOptions(options);\n  }, [observer, options]);\n  const result = React.useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) => observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer]\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult()\n  );\n  const mutate = React.useCallback(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop);\n    },\n    [observer]\n  );\n  if (result.error && shouldThrowError(observer.options.throwOnError, [result.error])) {\n    throw result.error;\n  }\n  return { ...result, mutate, mutateAsync: result.mutate };\n}\nexport {\n  useMutation\n};\n//# sourceMappingURL=useMutation.js.map","import {useSelector} from \"react-redux\";\r\nimport {useMutation, useQueryClient} from \"@tanstack/react-query\";\r\nimport jwtAxios from \"@utils/jwtUtil\";\r\nimport {API_SERVER_HOST} from \"@api/memberApi\";\r\nimport {useParams} from \"react-router\";\r\nimport { RootState } from '@/store';\r\nimport useCustomMember from '@hooks/useCustomMember';\r\n\r\nconst host = `${API_SERVER_HOST}/api/stock`;\r\n\r\nconst useTradeStock = () => {\r\n    const { companyId } = useParams();\r\n    const numericCompanyId = companyId ? parseInt(companyId, 10) : 0;\r\n    const orderType = useSelector((state: RootState) => state.stockOrderTypeSlice);\r\n    const orderPrice = useSelector((state: RootState) => state.stockOrderPriceSlice);\r\n    const orderVolume = useSelector((state: RootState) => state.stockOrderVolumeSlice);\r\n    const { loginState } = useCustomMember();\r\n    const memberId = loginState.memberId;\r\n\r\n    const queryClient = useQueryClient();\r\n    return useMutation({\r\n        mutationFn: async () => postOrderRequest(\r\n          orderType,\r\n          numericCompanyId,\r\n          orderPrice,\r\n          orderVolume,\r\n          memberId\r\n        ),\r\n        onSuccess: () => {\r\n            // 관련 쿼리들 무효화\r\n            queryClient.invalidateQueries({\r\n                queryKey: ['cash']\r\n            });\r\n            queryClient.invalidateQueries({\r\n                queryKey: ['holdingStock']\r\n            });\r\n            queryClient.invalidateQueries({\r\n                queryKey: ['orderRecord']\r\n            });\r\n            queryClient.invalidateQueries({\r\n                queryKey: ['stockHolds']\r\n            });\r\n            queryClient.invalidateQueries({\r\n                queryKey: ['money']\r\n            });\r\n        }\r\n    });\r\n\r\n};\r\n\r\nexport default useTradeStock;\r\n\r\nconst postOrderRequest = async (orderType:boolean , companyId:number, price:number, volume:number, memberId:number) => {\r\n    if (!orderType) {\r\n        // 매수\r\n        const response = await jwtAxios.post(`${host}/buy?companyId=${companyId}&price=${price}&stockCount=${volume}&memberId=${memberId}`);\r\n        return response.data;\r\n    } else {\r\n        // 매도\r\n        const response = await jwtAxios.post(`${host}/stock/sell?companyId=${companyId}&price=${price}&stockCount=${volume}`);\r\n        return response.data;\r\n    }\r\n};\r\n","import { useState, useEffect, useRef, FC } from 'react';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport { setStockOrderPrice } from \"@slices/stockOrderPriceSlice.ts\";\r\nimport { RootState } from '@/store';\r\n\r\nconst changeRateUnit = `%`;\r\n\r\ninterface StockPriceProps {\r\n    key: number;\r\n    index: number;\r\n    price: number;\r\n    volume: number;\r\n    changeRate: string;\r\n    totalSellingVolume: number;\r\n    totalBuyingVolume: number;\r\n}\r\n\r\nconst StockPrice: FC<StockPriceProps> = ({ index, price, volume, changeRate, totalSellingVolume, totalBuyingVolume } ) => {\r\n// const StockPrice: FC<StockPriceProps> = ({ index, price, volume, changeRate} ) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const orderPrice = useSelector((state: RootState) => state.stockOrderPriceSlice);\r\n    const ref = useRef<HTMLInputElement>(null);\r\n\r\n    const handleSetOrderPrice = () => {\r\n        dispatch(setStockOrderPrice(price));\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (index === 9 && ref.current) {\r\n            ref.current.focus();\r\n            ref.current.scrollIntoView({ behavior: \"smooth\", block: \"center\" });\r\n        }\r\n    }, [ref, index]);\r\n\r\n    return (\r\n        <Container $index={index} ref={index === 9 ? ref : null} $price={price} $orderPrice={orderPrice} onClick={handleSetOrderPrice}>\r\n            <Price $changeRate={parseFloat(changeRate)}>\r\n                <div className=\"price\">{price.toLocaleString()}</div>\r\n                <div className=\"changeRate\">\r\n                    {changeRate}\r\n                    {changeRateUnit}\r\n                </div>\r\n            </Price>\r\n            <Volume $index={index}>\r\n                <div className=\"volume\">{volume.toLocaleString()}</div>\r\n                <VolumePercentage index={index} volume={volume} upperPriceVolumeSum={totalSellingVolume} lowerPriceVolumeSum={totalBuyingVolume} />\r\n            </Volume>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default StockPrice;\r\n\r\ninterface VolumePercentageProps {\r\n    index: number;\r\n    volume: number;\r\n    upperPriceVolumeSum: number;\r\n    lowerPriceVolumeSum: number;\r\n};\r\n\r\n// 전체 매도/도수 거래량 대비 개별가격 매도/매수 거래량 비율\r\nconst VolumePercentage: FC<VolumePercentageProps>= (props) => {\r\n    const { index, volume, upperPriceVolumeSum, lowerPriceVolumeSum } = props;\r\n    const [width, setWidth] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setWidth((volume / (index < 10 ? upperPriceVolumeSum : lowerPriceVolumeSum)) * 100);\r\n    }, [volume, index, upperPriceVolumeSum, lowerPriceVolumeSum]);\r\n\r\n    return <StockVolumePercentage $index={index} $volume={volume} $upperPriceVolumeSum={upperPriceVolumeSum} $lowerPriceVolumeSum={lowerPriceVolumeSum} style={{ width: `${width}%` }} />;\r\n};\r\n\r\nexport interface PriceProps {\r\n    $price: boolean;\r\n}\r\n\r\nexport interface ChangeRateProps {\r\n    $changeRate: number;\r\n}\r\n\r\nexport interface IndexProps {\r\n    $index: number;\r\n}\r\n\r\nexport interface OrderPriceProps {\r\n    $orderPrice: number;\r\n}\r\n\r\ninterface ContainerProps {\r\n    $price: number;\r\n    $orderPrice: number;\r\n    $index: number;\r\n}\r\n\r\nconst Container = styled.div<ContainerProps>`\r\n    width: 100%;\r\n    height: 46px;\r\n    margin-bottom: 2px;\r\n    background-color: ${(props) => (props.$price === props.$orderPrice ? (props.$index > 9 ? \"#e9c2bf\" : \"#bed1eb\") : props.$index > 9 ? \"#FDE8E7\" : \"#E7F0FD\")};\r\n    border-left: ${(props) => (props.$price === props.$orderPrice ? \"3px solid red\" : props.$index > 9 ? \"3px solid #FDE8E7\" : \"3px solid #E7F0FD\")};\r\n    display: flex;\r\n    flex-direction: row;\r\n    transition: border 0.8s ease, background-color 0.8s ease;\r\n\r\n    &:hover {\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nconst Price = styled.div<ChangeRateProps>`\r\n    width: 50%;\r\n    display: flex;\r\n    padding-right: 11px;\r\n    flex-direction: column;\r\n    align-items: flex-end;\r\n\r\n    .price {\r\n        font-size: 14px;\r\n        font-weight: 400;\r\n        padding-top: 1px;\r\n    }\r\n\r\n    .changeRate {\r\n        font-size: 12px;\r\n        font-weight: 400;\r\n        color: ${(props) => (props.$changeRate > 0 ? \"#ed2926\" : props.$changeRate === 0 ? \"black\" : \"#3177d7\")};\r\n    }\r\n`;\r\n\r\nconst Volume = styled.div<IndexProps>`\r\n    width: 50%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n    align-items: flex-end;\r\n    font-size: 12px;\r\n    color: ${(props) => (props.$index < 10 ? \"#2679ed\" : \"#e22926\")};\r\n\r\n    .volume {\r\n        height: 100%;\r\n        display: flex;\r\n        align-items: center;\r\n        padding-right: 8px;\r\n    }\r\n`;\r\n\r\nconst StockVolumePercentage = styled.span<{ $index: number; $volume: number; $upperPriceVolumeSum: number; $lowerPriceVolumeSum: number }>`\r\n    height: 2px;\r\n    background-color: ${(props) => (props.$index < 10 ? \"#2679ed\" : \"#e22926\")};\r\n    transition: width 0.5s ease;\r\n`;","import { useSelector } from \"react-redux\";\r\nimport useGetStockInfo from \"@hooks/useGetStockInfo\";\r\nimport styled from \"styled-components\";\r\nimport StockPrice from \"./StockPrice\";\r\nimport {useParams} from \"react-router\";\r\nimport { OrderTypeProps } from '@components/stock/domestic/detail/buy/OrderDecisionBtn';\r\nimport { RootState } from '@/store';\r\n\r\nconst StockPriceList = () => {\r\n    // const companyId = useSelector((state) => state.companyId);\r\n    const {companyId} = useParams();\r\n    const companyIdNumber = Number(companyId);\r\n\r\n    const stockOrderType = useSelector((state: RootState) => state.stockOrderTypeSlice);\r\n    const { stockInfo } = useGetStockInfo(companyIdNumber);\r\n\r\n    if (!stockInfo || !stockInfo.stockInfResponseDto || !stockInfo.stockAsBiResponseDto) {\r\n        return null;\r\n    }\r\n\r\n    // 전날 종가 계산\r\n    const presentStockPrice = parseInt(stockInfo.stockInfResponseDto.stck_prpr, 10); // 현재가\r\n    const priceChageAmountComparedYesterday = parseInt(stockInfo.stockInfResponseDto.prdy_vrss, 10); // 전날 종가대비 현재가 가격 차이\r\n    const yesterDayStockClosingPrice = presentStockPrice - priceChageAmountComparedYesterday; // 전날종가 = 현재가 - 전날 종가대비 현재가 가격 차이\r\n\r\n\r\n    // 1) 당일 매도/매수호가 및 거래량\r\n    const sellingPrice = [];\r\n    const buyingPrice = [];\r\n\r\n    //높은 가격 ---------------------------------------------------------------------------------------------------------> 낮은가격\r\n    //매도호가                                                      | 매수호가\r\n    // askp10 askp9 askp8 askp7 askp6 askp5 askp4 askp3 askp2 askp1 bidp1 bidp2 bidp3 bidp4 bidp5 bidp6 bidp7 bidp8 bidp9 bidp10\r\n    //                                                   unshift ->| <- push\r\n    for (let i = 1; i < 11; i++) {\r\n        const sellingPriceProp = `askp${i}`; // 매도 호가\r\n        const sellingVolumeProp = `askp_rsqn${i}`; // 해당 매도호가 거래량\r\n        const buyingPriceProp = `bidp${i}`; // 매수 호가\r\n        const buyingVolumeProp = `bidp_rsqn${i}`; // 해당 매수호가 거래량\r\n\r\n        const sellingInfo = {\r\n            price: parseInt(stockInfo.stockAsBiResponseDto[sellingPriceProp]),\r\n            volume: parseInt(stockInfo.stockAsBiResponseDto[sellingVolumeProp]),\r\n        };\r\n\r\n        const buyingInfo = {\r\n            price: parseInt(stockInfo.stockAsBiResponseDto[buyingPriceProp]),\r\n            volume: parseInt(stockInfo.stockAsBiResponseDto[buyingVolumeProp]),\r\n        };\r\n\r\n        sellingPrice.unshift(sellingInfo);\r\n        buyingPrice.push(buyingInfo);\r\n    }\r\n\r\n    // price 0인 경우 제외\r\n    const existSellingPrice = sellingPrice.filter((selling) => selling.price !== 0);\r\n    const existBuyingPrice = buyingPrice.filter((buyingPrice) => buyingPrice.price !== 0);\r\n\r\n    // 더미 데이터 추가 로직\r\n    //1. 가장 낮은 매도호가, 가장 높은 매수호가 차이\r\n    const priceInterval = existSellingPrice[existSellingPrice.length - 1].price - existBuyingPrice[0].price;\r\n\r\n    //2. 단위호가만큼 가장 높은 매도호가에 더하기\r\n    for (let i = 0; existSellingPrice.length < 10; i++) {\r\n        const dummySellingData = { price: existSellingPrice[0].price + priceInterval, volume: 0 };\r\n        existSellingPrice.unshift(dummySellingData);\r\n    }\r\n\r\n    //3. 단위호가만큼 가장 낮은 매수호가에서 빼기\r\n    for (let i = 0; existBuyingPrice.length < 10; i++) {\r\n        const dummyBuyingData = { price: existBuyingPrice[existBuyingPrice.length - 1].price - priceInterval, volume: 0 };\r\n        existBuyingPrice.push(dummyBuyingData);\r\n    }\r\n\r\n    // 1) 매도/매수호가 종합\r\n    const sellingAndBuyingPrice = [...existSellingPrice, ...existBuyingPrice];\r\n    // 2) 매수/매도호가 거래량 종합\r\n    const totalSellingVolume = existSellingPrice.reduce((acc, cur) => {\r\n        return (acc = acc + cur.volume);\r\n    }, 0);\r\n    const totalBuyingVolume = existBuyingPrice.reduce((acc, cur) => {\r\n        return (acc = acc + cur.volume);\r\n    }, 0);\r\n\r\n    return (\r\n        <Container $orderType={stockOrderType}>\r\n            <PriceList>\r\n                {sellingAndBuyingPrice.map((item, idx) => {\r\n                    const changeRate = (((item.price - yesterDayStockClosingPrice) / yesterDayStockClosingPrice) * 100).toFixed(2); // 전날 종가대비 주가 변동률\r\n                    return <StockPrice key={item.price} index={idx} price={item.price} volume={item.volume} changeRate={changeRate} totalSellingVolume={totalSellingVolume} totalBuyingVolume={totalBuyingVolume} />;\r\n                })}\r\n            </PriceList>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default StockPriceList;\r\n\r\nconst Container = styled.div<OrderTypeProps>`\r\n    width: 40%;\r\n    height: 100%;\r\n    margin-right: 16px;\r\n\r\n    .priceIndicator {\r\n        display: flex;\r\n        flex-direction: row;\r\n        width: 100%;\r\n        height: 32px;\r\n        font-size: 13px;\r\n        padding-left: 15px;\r\n\r\n        & div {\r\n            width: 100%;\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n        }\r\n    }\r\n`;\r\n\r\nconst PriceList = styled.ul`\r\n    width: 100%;\r\n    height: 100%;\r\n    padding: 0;\r\n    overflow-y: scroll;\r\n\r\n    &::-webkit-scrollbar {\r\n        display: none;\r\n    }\r\n`;\r\n","import React, { useState, useEffect, FC } from 'react';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { styled } from \"styled-components\";\r\nimport {\r\n    minusStockOrderPrice,\r\n    plusStockOrderPrice,\r\n    setStockOrderPrice\r\n} from \"@slices/stockOrderPriceSlice.ts\";\r\nimport { StockAsBiResponseDto } from '@typings/dto';\r\nimport { RootState } from '@/store';\r\n\r\nconst priceSettingTitle = \"가격\";\r\nconst unitText = \"원\";\r\n\r\nconst noVolumeNotification = \" [거래량 없음] 주문 시 대기 처리 됩니다\";\r\nconst existVolumeNotification = \" [거래량 있음] 주문 시 체결 처리 됩니다\";\r\n\r\ninterface PriceSettingProps {\r\n    stockInfo: StockAsBiResponseDto;\r\n    companyId: number;\r\n}\r\n\r\nconst PriceSetting: FC<PriceSettingProps> = ({ stockInfo, companyId } ) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const orderPrice = useSelector((state: RootState) => state.stockOrderPriceSlice);\r\n\r\n    const [priceChangeTimer, setPriceChangeTimer] = useState<ReturnType<typeof setTimeout> | null>(null);\r\n\r\n    const { askp1, askp2, askp3, askp4, askp5, askp6, askp7, askp8, askp9, askp10 } = stockInfo;\r\n    const sellingInfo = [askp1, askp2, askp3, askp4, askp5, askp6, askp7, askp8, askp9, askp10];\r\n    const sellingPrice = sellingInfo.map((price) => parseInt(price));\r\n    const existSellingPrice = sellingPrice.filter((price) => price !== 0);\r\n    const defaultPrice = existSellingPrice[0]; //매도 호가중 첫번째\r\n    const priceInterval = existSellingPrice[1] - existSellingPrice[0]; //단위 호가\r\n\r\n    const orderType = useSelector((state: RootState) => state.stockOrderTypeSlice);\r\n    const [orderPossibility, setOrderPossibility] = useState(true);\r\n\r\n    const { bidp1, bidp2, bidp3, bidp4, bidp5, bidp6, bidp7, bidp8, bidp9, bidp10 } = stockInfo;\r\n    const buyingInfo = [bidp1, bidp2, bidp3, bidp4, bidp5, bidp6, bidp7, bidp8, bidp9, bidp10];\r\n    const buyingPrice = buyingInfo.map((price) => parseInt(price));\r\n    const existBuyingPrice = buyingPrice.filter((price) => price !== 0);\r\n\r\n    //호가 중에 있어야 거래 가능\r\n    const handleCheckTradePossibility = () => {\r\n        if (orderType) {\r\n            if (orderPrice !== 0 && !existBuyingPrice.includes(orderPrice)) {\r\n                setOrderPossibility(false);\r\n            } else {\r\n                setOrderPossibility(true);\r\n            }\r\n        } else {\r\n            if (orderPrice !== 0 && !existSellingPrice.includes(orderPrice)) {\r\n                setOrderPossibility(false);\r\n            } else {\r\n                setOrderPossibility(true);\r\n            }\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        handleCheckTradePossibility();\r\n    }, [orderPrice, orderType]);\r\n\r\n    //단위 호가만큼 증가\r\n    const handlePlusOrderPrice = () => {\r\n        dispatch(plusStockOrderPrice(priceInterval));\r\n    };\r\n\r\n    //단위 호가만큼 감소\r\n    const handleMinusOrderPrice = () => {\r\n        dispatch(minusStockOrderPrice(priceInterval));\r\n    };\r\n\r\n    const handleInputArrowBtn = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.code === \"ArrowUp\") {\r\n            handlePlusOrderPrice();\r\n        } else if (event.code === \"ArrowDown\") {\r\n            handleMinusOrderPrice();\r\n        }\r\n    };\r\n\r\n    const handleWriteOrderPrice = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const inputPrice = event.target.value;\r\n        const numberInputPrice = parseInt(inputPrice, 10);\r\n\r\n        if (numberInputPrice < 0 || isNaN(numberInputPrice)) {\r\n            if (inputPrice === \"\") {\r\n                dispatch(setStockOrderPrice(0));\r\n            }\r\n            return;\r\n        }\r\n\r\n        if (priceChangeTimer !== null) {\r\n            clearTimeout(priceChangeTimer);\r\n        }\r\n\r\n        dispatch(setStockOrderPrice(numberInputPrice));\r\n\r\n        if (numberInputPrice > priceInterval && numberInputPrice % priceInterval !== 0) {\r\n            const newTimer = setTimeout(() => {\r\n                const remainder = numberInputPrice % priceInterval;\r\n                const modifiedInputValue = numberInputPrice - remainder;\r\n                dispatch(setStockOrderPrice(modifiedInputValue));\r\n            }, 800);\r\n\r\n            setPriceChangeTimer(newTimer);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(setStockOrderPrice(defaultPrice));\r\n    }, [companyId]);\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"PriceCategoryBox\">\r\n                <div className=\"Title\">{priceSettingTitle}</div>\r\n            </div>\r\n            <div className=\"PriceSettingBox\">\r\n                <PriceController  value={orderPrice} onChange={handleWriteOrderPrice} onKeyDown={handleInputArrowBtn} onFocus={handleCheckTradePossibility} />\r\n                <UnitContent>{unitText}</UnitContent>\r\n                <div className=\"DirectionBox\">\r\n                    <button className=\"PriceUp\" onClick={handlePlusOrderPrice}>\r\n                        &#8896;\r\n                    </button>\r\n                    <button className=\"PriceDown\" onClick={handleMinusOrderPrice}>\r\n                        &#8897;\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <CheckTradingVolume $orderPossibility={orderPossibility}>\r\n                <div>&#10004; {orderPossibility ? `${existVolumeNotification}` : `${noVolumeNotification}`}</div>\r\n            </CheckTradingVolume>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default PriceSetting;\r\n\r\nconst Container = styled.div`\r\n    position: relative;\r\n    width: 100%;\r\n    margin-top: 21px;\r\n    margin-bottom: 34px;\r\n\r\n    .PriceCategoryBox {\r\n        display: flex;\r\n        flex-direction: row;\r\n        justify-content: space-between;\r\n        margin-bottom: 8px;\r\n\r\n        .Title {\r\n            padding-left: 5px;\r\n            font-size: 13px;\r\n            color: #999999;\r\n        }\r\n\r\n        .ButtonContainer {\r\n            position: relative;\r\n            width: 100px;\r\n            height: 25px;\r\n            background-color: #f2f2f2;\r\n            border-radius: 0.3rem;\r\n            display: flex;\r\n            flex-direction: row;\r\n            justify-content: center;\r\n            align-items: center;\r\n            gap: 2px;\r\n        }\r\n    }\r\n\r\n    .PriceSettingBox {\r\n        display: flex;\r\n        flex-direction: row;\r\n        \r\n\r\n        .DirectionBox {\r\n            display: flex;\r\n            flex-direction: column;\r\n\r\n            & button {\r\n                width: 31px;\r\n                height: 15px;\r\n                display: flex;\r\n                justify-content: center;\r\n                align-items: center;\r\n                font-size: 10px;\r\n                border: 1px solid darkgray;\r\n                border-radius: 0;\r\n\r\n                &.PriceUp {\r\n                    border-bottom: none;\r\n                    border-radius: 0 0.2rem 0 0;\r\n                }\r\n\r\n                &.PriceDown {\r\n                    border-radius: 0 0 0.2rem 0;\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst PriceController = styled.input`\r\n    width: 100%;\r\n    flex: 1 0 0;\r\n    height: 30px;\r\n    border: 1px solid darkgray;\r\n    border-right: none;\r\n    border-radius: 0.2rem 0 0 0.2rem;\r\n    font-size: 15px;\r\n    font-weight: 500;\r\n    text-align: right;\r\n    padding-bottom: 3px;\r\n`;\r\n\r\nconst UnitContent = styled.div`\r\n    height: 30px;\r\n    color: #999999;\r\n    font-size: 13px;\r\n    font-weight: 400;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    padding-right: 8px;\r\n    border-top: 1px solid darkgray;\r\n    border-bottom: 1px solid darkgray;\r\n    background-color: #ffffff;\r\n`;\r\n\r\nexport interface OrderPossibilityProps {\r\n    $orderPossibility: boolean;\r\n}\r\n\r\nconst CheckTradingVolume = styled.div<OrderPossibilityProps>`\r\n    position: absolute;\r\n    top: 61px;\r\n    left: 2px;\r\n    font-size: 0.77em;\r\n    color: ${(props) => (props.$orderPossibility ? \"#2679ed\" : \"#e22926\")};\r\n    transition: color 0.3s ease-in-out;\r\n`;\r\n","import { useQuery } from \"@tanstack/react-query\";\r\nimport jwtAxios from \"@utils/jwtUtil\";\r\nimport { API_SERVER_HOST } from \"@api/memberApi\";\r\nimport { GetCashResponse } from '@typings/hooks';\r\nimport useCustomMember from '@hooks/useCustomMember';\r\n\r\nconst host = `${API_SERVER_HOST}/api/cash`;\r\n\r\nconst getCashData = async (memberId: number): Promise<number> => {\r\n    const response = await jwtAxios.get(`${host}/one/${memberId}`);\r\n    return response.data.money;\r\n};\r\n\r\nconst useGetCash = (): GetCashResponse => {\r\n    const { loginState } = useCustomMember();\r\n    const isLogin = !!loginState.email;\r\n    const memberId = loginState.memberId;\r\n\r\n    const { data, isLoading, isError } = useQuery({\r\n        queryKey: ['cash', memberId],\r\n        queryFn: () => getCashData(memberId),\r\n        enabled: isLogin,\r\n        staleTime: 1000 * 60 * 5,\r\n        refetchOnWindowFocus: false\r\n    });\r\n\r\n    return { cashData: data, cashLoading: isLoading, cashError: isError };\r\n};\r\n\r\nexport default useGetCash;\r\n","import { useQuery } from \"@tanstack/react-query\";\r\nimport jwtAxios from \"@utils/jwtUtil\";\r\nimport { API_SERVER_HOST } from \"@api/memberApi\";\r\nimport { StockHoldResponseDto } from '@typings/dto'\r\nimport useCustomMember from '@hooks/useCustomMember';\r\n\r\nconst host = `${API_SERVER_HOST}/api/stock`;\r\n\r\nconst getHoldingStock = async (memberId: number, companyId: number): Promise<StockHoldResponseDto[]> => {\r\n    const response = await jwtAxios.get(`${host}/stockholds/${memberId}`, { params: { companyId } });\r\n    return response.data;\r\n};\r\n\r\nconst useGetHoldingStock = (companyId: number) => {\r\n    const { loginState } = useCustomMember();\r\n    const isLogin = !!loginState.email;\r\n    const memberId = loginState.memberId;\r\n\r\n    const { data, isLoading, isError } = useQuery({\r\n        queryKey: ['holdingStocks', companyId],\r\n        queryFn: () => getHoldingStock(memberId, companyId),\r\n        enabled: isLogin,\r\n        staleTime: 1000 * 60 * 5,\r\n        refetchOnWindowFocus: true\r\n    });\r\n\r\n    return { holdingStockData: data, holdingStockLoading: isLoading, holdingStockError: isError };\r\n};\r\n\r\nexport default useGetHoldingStock;\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { styled } from \"styled-components\";\r\nimport {useParams} from \"react-router\";\r\nimport {\r\n    minusStockOrderVolume,\r\n    plusStockOrderVolume,\r\n    setStockOrderVolume\r\n} from \"@slices/stockOrderVolumeSlice\";\r\nimport useGetCash from \"@hooks/useGetCash\";\r\nimport useGetHoldingStock from \"@hooks/useGetHoldingStock\";\r\nimport { RootState } from '@/store';\r\nimport { OrderTypeProps } from '@components/stock/domestic/detail/buy/OrderDecisionBtn';\r\n\r\nconst volumeSettingTitle = \"수량\";\r\nconst maximumVolumeText01 = \"최대\";\r\nconst volumeUnit = \"주\";\r\n\r\nconst volumePercentage01 = 10;\r\nconst volumePercentage02 = 25;\r\nconst volumePercentage03 = 50;\r\nconst volumePercentage04 = 100;\r\nconst percentageUnit = \"%\";\r\n\r\nconst VolumeSetting = () => {\r\n    const dispatch = useDispatch();\r\n    const {companyId} = useParams();\r\n    const companyIdNumber = Number(companyId);\r\n    const orderType = useSelector((state: RootState) => state.stockOrderTypeSlice);\r\n    const orderPrice = useSelector((state: RootState) => state.stockOrderPriceSlice);\r\n    const orderVolume = useSelector((state: RootState) => state.stockOrderVolumeSlice);\r\n\r\n    let availableSellingStock = 0;\r\n\r\n    const { cashData } = useGetCash();\r\n    const { holdingStockData } = useGetHoldingStock(companyIdNumber);\r\n\r\n    let maximumBuyingVolume = 0;\r\n\r\n    if (cashData && holdingStockData) {\r\n        maximumBuyingVolume = orderPrice !== 0 ? Math.trunc(cashData / orderPrice) : Math.trunc(cashData);\r\n        const holdingCompanyStock = holdingStockData.filter((stock) => stock.companyId === companyIdNumber);\r\n\r\n        if (holdingCompanyStock.length !== 0) {\r\n            availableSellingStock = holdingCompanyStock[0].stockCount;\r\n        }\r\n    }\r\n\r\n    // 매수 -> 최대구매가능주식수 보다 작으면 매수\r\n    // 매도 -> 최대매도가능주식수 보다 작으면 매도\r\n    const handlePlusOrderVolume = () => {\r\n        if (!orderType) {\r\n            orderVolume < maximumBuyingVolume && dispatch(plusStockOrderVolume());\r\n        }\r\n        if (orderType) {\r\n            orderVolume < availableSellingStock && dispatch(plusStockOrderVolume());\r\n        }\r\n    };\r\n\r\n    const handleMinusOrderVolume = () => {\r\n        if (0 < orderVolume) {\r\n            dispatch(minusStockOrderVolume());\r\n        }\r\n    };\r\n\r\n    const handleInputArrowBtn = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.code === \"ArrowUp\") {\r\n            handlePlusOrderVolume();\r\n        } else if (event.code === \"ArrowDown\") {\r\n            handleMinusOrderVolume();\r\n        }\r\n    };\r\n\r\n    const handleWriteOrderVolume = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const inputValue = event.target.value;\r\n        const numberInputValue = parseInt(inputValue, 10);\r\n\r\n        if (numberInputValue < 0 || isNaN(numberInputValue)) {\r\n            if (inputValue === \"\") {\r\n                dispatch(setStockOrderVolume(0));\r\n            }\r\n            return;\r\n        }\r\n\r\n        if (!orderType) {\r\n            if (maximumBuyingVolume < numberInputValue) {\r\n                return;\r\n            } else {\r\n                dispatch(setStockOrderVolume(numberInputValue));\r\n            }\r\n        }\r\n\r\n        if (orderType) {\r\n            if (availableSellingStock < numberInputValue) {\r\n                return;\r\n            } else {\r\n                dispatch(setStockOrderVolume(numberInputValue));\r\n            }\r\n        }\r\n    };\r\n\r\n    // 매수 -> 최대구매가능주식수 의 일정 비율만큼 매수\r\n    // 매도 -> 최대매도가능주식수 의 일정 비율만큼 매도\r\n    const handleSetVolumePercentage = (volumePercentage: number) => {\r\n        if (!orderType) {\r\n            const orderVolume = Math.trunc(maximumBuyingVolume * (volumePercentage / 100));\r\n            dispatch(setStockOrderVolume(orderVolume));\r\n        }\r\n\r\n        if (orderType) {\r\n            const orderVolume = Math.trunc(availableSellingStock * (volumePercentage / 100));\r\n            dispatch(setStockOrderVolume(orderVolume));\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (maximumBuyingVolume < orderVolume) {\r\n            dispatch(setStockOrderVolume(maximumBuyingVolume));\r\n        }\r\n    }, [maximumBuyingVolume]);\r\n\r\n    useEffect(() => {\r\n        dispatch(setStockOrderVolume(0));\r\n    }, [companyId]);\r\n\r\n    return (\r\n        <Container>\r\n            <TitleContainer $orderType={orderType}>\r\n                <div className=\"Title\">{volumeSettingTitle}</div>\r\n                <div className=\"MaximumVolumeContainer\">\r\n                    <span>{maximumVolumeText01}</span>\r\n                    <span className=\"maximumVolume\">{orderType ? availableSellingStock : maximumBuyingVolume}</span>\r\n                    <span>{volumeUnit}</span>\r\n                </div>\r\n            </TitleContainer>\r\n            <VolumeSettingBox>\r\n                <VolumeController  value={orderVolume} onChange={handleWriteOrderVolume} onKeyDown={handleInputArrowBtn} />\r\n                <UnitContent>{volumeUnit}</UnitContent>\r\n                <div className=\"DirectionContainer\">\r\n                    <button className=\"VolumeUp\" onClick={handlePlusOrderVolume}>\r\n                        &#8896;\r\n                    </button>\r\n                    <button className=\"VolumeDown\" onClick={handleMinusOrderVolume}>\r\n                        &#8897;\r\n                    </button>\r\n                </div>\r\n            </VolumeSettingBox>\r\n            <PercentageBox>\r\n                <button onClick={() => handleSetVolumePercentage(volumePercentage01)}>\r\n                    {volumePercentage01}\r\n                    {percentageUnit}\r\n                </button>\r\n                <button onClick={() => handleSetVolumePercentage(volumePercentage02)}>\r\n                    {volumePercentage02}\r\n                    {percentageUnit}\r\n                </button>\r\n                <button onClick={() => handleSetVolumePercentage(volumePercentage03)}>\r\n                    {volumePercentage03}\r\n                    {percentageUnit}\r\n                </button>\r\n                <button onClick={() => handleSetVolumePercentage(volumePercentage04)}>\r\n                    {volumePercentage04}\r\n                    {percentageUnit}\r\n                </button>\r\n            </PercentageBox>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default VolumeSetting;\r\n\r\nconst Container = styled.div`\r\n    width: 100%;\r\n    margin-top: 16px;\r\n    margin-bottom: 56px;\r\n`;\r\n\r\nconst TitleContainer = styled.div<OrderTypeProps>`\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    margin-bottom: 8px;\r\n\r\n    .Title {\r\n        padding-left: 5px;\r\n        font-size: 13px;\r\n        color: #999999;\r\n    }\r\n\r\n    .MaximumVolumeContainer {\r\n        display: flex;\r\n        flex-direction: row;\r\n        gap: 3px;\r\n\r\n        & span {\r\n            font-size: 14px;\r\n            color: #999999;\r\n        }\r\n\r\n        .maximumVolume {\r\n            color: ${(props) => (props.$orderType ? \"#3177d7\" : \"#ed2926\")};\r\n        }\r\n    }\r\n`;\r\n\r\nconst VolumeSettingBox = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n\r\n    .DirectionContainer {\r\n        display: flex;\r\n        flex-direction: column;\r\n\r\n        & button {\r\n            width: 31px;\r\n            height: 15px;\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n            font-size: 10px;\r\n            border: 1px solid darkgray;\r\n            border-radius: 0;\r\n\r\n            &.VolumeUp {\r\n                border-bottom: none;\r\n                border-radius: 0 0.2rem 0 0;\r\n            }\r\n\r\n            &.VolumeDown {\r\n                border-radius: 0 0 0.2rem 0;\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst VolumeController = styled.input`\r\n    width: 100%;\r\n    flex: 1 0 0;\r\n    height: 30px;\r\n    border: 1px solid darkgray;\r\n    border-right: none;\r\n    border-radius: 0.2rem 0 0 0.2rem;\r\n    font-size: 15px;\r\n    font-weight: 500;\r\n    text-align: right;\r\n    padding-bottom: 3px;\r\n`;\r\n\r\nconst PercentageBox = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    margin-top: 8px;\r\n    gap: 8px;\r\n\r\n    & button {\r\n        width: 56px;\r\n        height: 28px;\r\n        border: none;\r\n        border-radius: 0.2rem;\r\n    }\r\n`;\r\n\r\nconst UnitContent = styled.div`\r\n    height: 30px;\r\n    color: #999999;\r\n    font-size: 13px;\r\n    font-weight: 400;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    padding-right: 8px;\r\n    border-top: 1px solid darkgray;\r\n    border-bottom: 1px solid darkgray;\r\n    background-color: #ffffff;\r\n`;\r\n","import {useState, useEffect} from \"react\";\r\nimport {useSelector, useDispatch} from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport useGetCash from \"@hooks/useGetCash.ts\";\r\nimport {setStockOrderVolume} from \"@slices/stockOrderVolumeSlice.ts\";\r\nimport {openDecisionWindow} from \"@slices/decisionWindowSlice.ts\";\r\nimport { RootState } from '@/store';\r\n\r\nconst availableMoneyText01 = \"최대\";\r\nconst availableMoneyText02 = \"원\";\r\nconst totalAmountText = \"주문총액\";\r\nconst totalAmountUnit = \"원\";\r\n\r\nconst OrderDecisionBtn = () => {\r\n\r\n    let cash = '';\r\n\r\n    const {cashData} = useGetCash();\r\n    if (cashData) {\r\n        cash = cashData.toLocaleString();\r\n    }\r\n\r\n    const dispatch = useDispatch();\r\n    const orderType = useSelector((state: RootState) => state.stockOrderTypeSlice);\r\n    const orderPrice = useSelector((state: RootState) => state.stockOrderPriceSlice);\r\n    const orderVolume = useSelector((state: RootState) => state.stockOrderVolumeSlice);\r\n    const [totalOrderAmount, setTotalOrderAmount] = useState(0);\r\n\r\n    const orderBtnText = orderType ? \"매도\" : \"매수\";\r\n\r\n    const handleOpenDecisionWindow = () => {\r\n        dispatch(openDecisionWindow());\r\n    };\r\n\r\n    useEffect(() => {\r\n        setTotalOrderAmount(orderPrice * orderVolume);\r\n    }, [orderPrice, orderVolume]);\r\n\r\n    useEffect(() => {\r\n        dispatch(setStockOrderVolume(0));\r\n        setTotalOrderAmount(0);\r\n    }, [orderType]);\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <AvailableMoney $orderType={orderType}>\r\n                <span>{availableMoneyText01}</span>\r\n                <span className=\"availableMoney\">{cash}</span>\r\n                <span>{availableMoneyText02}</span>\r\n            </AvailableMoney>\r\n            <TotalAmount>\r\n                <div className=\"totalAmountText\">{totalAmountText}</div>\r\n                <div className=\"totalAmount\">{totalOrderAmount.toLocaleString()}</div>\r\n                <div>{totalAmountUnit}</div>\r\n            </TotalAmount>\r\n            <OrderBtn $orderType={orderType} onClick={handleOpenDecisionWindow}>\r\n                {orderBtnText}\r\n            </OrderBtn>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default OrderDecisionBtn;\r\n\r\nexport interface OrderTypeProps {\r\n    $orderType: boolean;\r\n}\r\n\r\nconst AvailableMoney = styled.div<OrderTypeProps>`\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: flex-end;\r\n    gap: 4px;\r\n\r\n    & span {\r\n        font-size: 14px;\r\n        color: ${(props) => (props.$orderType ? \"white\" : \"#999999\")};\r\n    }\r\n\r\n    .availableMoney {\r\n        color: ${(props) => (props.$orderType ? \"white\" : \"#ed2926\")};\r\n    }\r\n`;\r\n\r\nconst TotalAmount = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    margin-top: 4px;\r\n    gap: 4px;\r\n\r\n    & div {\r\n        font-size: 13px;\r\n        color: #999999;\r\n        display: flex;\r\n        align-items: center;\r\n    }\r\n\r\n    .totalAmountText {\r\n        flex: 8 0 0;\r\n    }\r\n\r\n    .totalAmount {\r\n        color: black;\r\n        font-size: 15.5px;\r\n    }\r\n`;\r\n\r\nconst OrderBtn = styled.button<OrderTypeProps>`\r\n    width: 100%;\r\n    height: 32px;\r\n    margin-top: 16px;\r\n    border: none;\r\n    border-radius: 0.25rem;\r\n    background-color: ${(props) => (props.$orderType ? \"#2679ed\" : \"#e22926\")};\r\n    transition: background-color 0.5s;\r\n    color: #ffffff;\r\n    font-weight: 400;\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n        background-color: ${(props) => (props.$orderType ? \"#034baf\" : \"#c20d09\")};\r\n        transition: background-color 0.5s ease;\r\n    }\r\n`;\r\n","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { orderTypeBuying, orderTypeSelling } from \"@slices/stockOrderTypeSlice.ts\"\r\nimport styled from \"styled-components\";\r\nimport useGetStockInfo from \"@hooks/useGetStockInfo.ts\";\r\nimport {useParams} from \"react-router\";\r\n\r\nimport PriceSetting from \"./PriceSetting\";\r\nimport VolumeSetting from \"./VolumeSetting\";\r\nimport OrderDecisionBtn, { OrderTypeProps } from './OrderDecisionBtn';\r\nimport { RootState } from '@/store';\r\n\r\nconst orderType01 = \"매수\";\r\nconst orderType02 = \"매도\";\r\n\r\nconst StockOrderSetting = () => {\r\n    const dispatch = useDispatch();\r\n    const orderType = useSelector((state: RootState) => state.stockOrderTypeSlice);\r\n    const {companyId} = useParams();\r\n    const companyIdNumber = Number(companyId); // 숫자로 변환\r\n    const { stockInfo, stockInfoLoading, stockInfoError } = useGetStockInfo(companyIdNumber);\r\n\r\n    if (!stockInfo) {\r\n        return null;\r\n    }\r\n\r\n    if (stockInfoLoading) { return <></>; }\r\n\r\n    if (stockInfoError) { return <></>;  }\r\n\r\n    const handleSetBuying = () => {\r\n        dispatch(orderTypeBuying());\r\n    };\r\n\r\n    const handleSetSelling = () => {\r\n        dispatch(orderTypeSelling());\r\n    };\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"OrderType\">\r\n                <Buying onClick={handleSetBuying} $orderType={orderType}>\r\n                    {orderType01}\r\n                </Buying>\r\n                <Selling onClick={handleSetSelling} $orderType={orderType}>\r\n                    {orderType02}\r\n                </Selling>\r\n            </div>\r\n            <OrderTypeChangeEffectLine />\r\n            <PriceSetting stockInfo={stockInfo.stockAsBiResponseDto} companyId={Number(companyId)} />\r\n            <VolumeSetting />\r\n            <OrderDecisionBtn />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default StockOrderSetting;\r\n\r\nconst OrderTypeChangeEffectLine = () => {\r\n    const orderType = useSelector((state: RootState) => state.stockOrderTypeSlice);\r\n\r\n    return (\r\n        <DividingContainer >\r\n            <DefaultLine $orderType={orderType}>\r\n                <DividingLine $orderType={orderType} />\r\n            </DefaultLine>\r\n        </DividingContainer>\r\n    );\r\n};\r\n\r\nconst Container = styled.div`\r\n    width: 51%;\r\n    height: 100%;\r\n\r\n    .OrderType {\r\n        width: 100%;\r\n        height: 31px;\r\n        display: flex;\r\n        flex-direction: row;\r\n        color: #9999;\r\n    }\r\n`;\r\n\r\nconst Buying = styled.div<OrderTypeProps>`\r\n    flex: 1 0 0;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 31px;\r\n    font-size: 14px;\r\n    color: ${(props) => !props.$orderType && \"#e22926\"};\r\n    transition: color 0.5s;\r\n`;\r\n\r\nconst Selling = styled.div<OrderTypeProps>`\r\n    flex: 1 0 0;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 31px;\r\n    font-size: 14px;\r\n    color: ${(props) => props.$orderType && \"#2679ed\"};\r\n    transition: color 0.5s;\r\n`;\r\n\r\nconst DividingContainer = styled.div`\r\n    background-color: darkgray;\r\n`;\r\n\r\nconst DefaultLine = styled.div<OrderTypeProps>`\r\n    transform: translateX(${(props) => (props.$orderType ? \"50%\" : \"0\")});\r\n    transition: transform 0.3s ease-in-out;\r\n    width: 100%;\r\n    height: 2px;\r\n`;\r\n\r\nconst DividingLine = styled.div<OrderTypeProps>`\r\n    width: 50%;\r\n    height: 2px;\r\n    background-color: ${(props) => (props.$orderType ? \"#2679ed\" : \"#e22926\")};\r\n`;\r\n","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { setStockOrderVolume } from \"@slices/stockOrderVolumeSlice\";\r\nimport { closeDecisionWindow } from \"@slices/decisionWindowSlice\";\r\nimport { styled } from \"styled-components\";\r\nimport { toast } from \"react-toastify\";\r\nimport useTradeStock from \"@hooks/useTradeStock\";\r\nimport StockPriceList from \"./StockPriceList\";\r\nimport StockOrderSetting from \"./StockOrderSetting\";\r\n\r\nimport {dummyLogo, logoList} from \"@utils/companyLogos.ts\";\r\nimport { FC } from 'react';\r\nimport { RootState } from '@/store';\r\nimport { OrderTypeProps } from '@components/stock/domestic/detail/buy/OrderDecisionBtn';\r\n\r\nconst orderFailureMessage01 = \"주문 실패\";\r\nconst orderFailureMessage02 = \"주문 수량이 없습니다\";\r\nconst orderFailureMessage03 = \"입력하신 가격이 올바르지 않습니다\";\r\nconst orderFailureMessage04 = \"주문 가능한 시간이 아닙니다\";\r\nconst openingTimeIndicator = \"주문 가능 : 평일 오전 9시 ~ 오후 3시 30분\";\r\nconst orderFailureButtonText = \"확인\";\r\n\r\nconst orderPriceText = \"주문단가\";\r\nconst orderVolumeText = \"주문수량\";\r\nconst totalOrderAmountText = \"총 주문금액\";\r\nconst priceUnit = \"원\";\r\nconst volumeUnit = \"주\";\r\nconst cancelButtonText = \"취소\";\r\nconst confirmButtonText = \"확인\";\r\n\r\nconst toastText = \" 요청이 완료되었습니다\";\r\n\r\n\r\ninterface StockOrderProps {\r\n    corpName: string;\r\n}\r\n\r\nconst StockOrder: FC<StockOrderProps> = ({ corpName }) => {\r\n    const dispatch = useDispatch();\r\n    const orderType = useSelector((state: RootState) => state.stockOrderTypeSlice);\r\n    const orderVolume = useSelector((state: RootState) => state.stockOrderVolumeSlice);\r\n    const orderPrice = useSelector((state: RootState) => state.stockOrderPriceSlice);\r\n    const decisionWindow = useSelector((state: RootState) => state.decisionWindowSlice);\r\n\r\n    const orderTypeText = !orderType ? \"매수\" : \"매도\";\r\n    const price = orderPrice.toLocaleString();\r\n    const volume = orderVolume.toLocaleString();\r\n    const totalPrice = (orderPrice * orderVolume).toLocaleString();\r\n\r\n    const logos = {\r\n        ...logoList\r\n    };\r\n\r\n    const companyLogo = logos[corpName] || dummyLogo;\r\n\r\n    const handleCloseDecisionWindow = () => {\r\n        dispatch(closeDecisionWindow());\r\n    };\r\n\r\n    const orderRequest = useTradeStock();\r\n\r\n    const handleOrderConfirm = () => {\r\n        orderRequest.mutate();\r\n        // const { isLoading, isError } = orderRequest;\r\n        const { isError } = orderRequest;\r\n\r\n        // if (isLoading) {\r\n        //     console.log(\"주식 주문 진행 중\");\r\n        // }\r\n\r\n        if (isError) {\r\n            console.log(\"주문 오류 발생\");\r\n        }\r\n\r\n        toast(\r\n          <ToastMessage $orderType={orderType}>\r\n              <div className=\"overview\">\r\n                  <img src={companyLogo} alt=\"stock logo\" />\r\n                  <div className=\"orderInfo\">\r\n                      {corpName} {volume}\r\n                      {volumeUnit}\r\n                  </div>\r\n              </div>\r\n              <div>\r\n                  <span className=\"orderType\">✓ {orderTypeText}</span>\r\n                  <span>{toastText}</span>\r\n              </div>\r\n          </ToastMessage>,\r\n          {\r\n              // position: toast.POSITION.BOTTOM_LEFT,\r\n              hideProgressBar: true,\r\n          }\r\n        );\r\n\r\n        dispatch(setStockOrderVolume(0));\r\n        handleCloseDecisionWindow();\r\n    };\r\n\r\n    const orderFailureCase01 = false;\r\n    const orderFailureCase02 = orderPrice === 0 || orderVolume === 0;\r\n\r\n    return (\r\n      <>\r\n          <Container>\r\n              <StockPriceList />\r\n              <StockOrderSetting />\r\n          </Container>\r\n\r\n          {decisionWindow ? (\r\n            orderFailureCase01 || orderFailureCase02 ? (\r\n              <OrderFailed>\r\n                  <div className=\"Container\">\r\n                      <div className=\"message01\">{orderFailureCase01 ? orderFailureMessage04 : orderFailureMessage01}</div>\r\n                      <div className=\"message02\">{orderFailureCase01 ? openingTimeIndicator : orderPrice !== 0 ? orderFailureMessage02 : orderFailureMessage03}</div>\r\n                      <button onClick={handleCloseDecisionWindow}>{orderFailureButtonText}</button>\r\n                  </div>\r\n              </OrderFailed>\r\n            ) : (\r\n              <OrderConfirm $orderType={orderType}>\r\n                  <div className=\"Container\">\r\n                      <img className=\"CorpLogo\" src={companyLogo} alt=\"stock logo\" />\r\n                      <div className=\"OrderOverview\">\r\n                          <span className=\"CorpName\">{corpName}</span>\r\n                          <span className=\"OrderType\">{orderTypeText}</span>\r\n                      </div>\r\n                      <div className=\"OrderContent\">\r\n                          <div className=\"Price\">\r\n                              <span className=\"text\">{orderPriceText}</span>\r\n                              <span>{price} {priceUnit}</span>\r\n                          </div>\r\n                          <div className=\"Volume\">\r\n                              <span className=\"text\">{orderVolumeText}</span>\r\n                              <span>{volume} {volumeUnit}</span>\r\n                          </div>\r\n                          <div className=\"TotalOrderAmout\">\r\n                              <span className=\"text\">{totalOrderAmountText}</span>\r\n                              <span>{totalPrice} {priceUnit}</span>\r\n                          </div>\r\n                          <div className=\"ButtonContainer\">\r\n                              <button className=\"cancel\" onClick={handleCloseDecisionWindow}>{cancelButtonText}</button>\r\n                              <button className=\"confirm\" onClick={handleOrderConfirm}>{confirmButtonText}</button>\r\n                          </div>\r\n                      </div>\r\n                  </div>\r\n              </OrderConfirm>\r\n            )\r\n          ) : null}\r\n      </>\r\n    );\r\n};\r\n\r\nexport default StockOrder;\r\n\r\nconst Container = styled.div`\r\n    height: 414px;\r\n    display: flex;\r\n    flex-direction: row;\r\n`;\r\n\r\nconst OrderFailed = styled.div`\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100vw;\r\n    height: 100vh;\r\n    background-color: rgba(0, 0, 0, 0.5);\r\n    z-index: 400;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    .Container {\r\n        z-index: 100;\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        align-items: center;\r\n        gap: 8px;\r\n\r\n        width: 360px;\r\n        height: 148px;\r\n        padding: 16px;\r\n        background-color: white;\r\n        border-radius: 0.5rem;\r\n\r\n        .message01 {\r\n            font-size: 18.5px;\r\n            font-weight: 500;\r\n        }\r\n\r\n        .message02 {\r\n            font-size: 16.5px;\r\n            font-weight: 400;\r\n        }\r\n\r\n        & button {\r\n            width: 100%;\r\n            height: 36px;\r\n            border: none;\r\n            border-radius: 0.5rem;\r\n            font-size: 14.5px;\r\n            color: white;\r\n            background-color: #2f4f4f;\r\n            margin-top: 12px;\r\n        }\r\n    }\r\n`;\r\n\r\nconst OrderConfirm = styled.div<OrderTypeProps>`\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100vw;\r\n    height: 100vh;\r\n    background-color: rgba(0, 0, 0, 0.5);\r\n    z-index: 400;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    & div {\r\n        z-index: 400;\r\n    }\r\n\r\n    .Container {\r\n        z-index: 500;\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        align-items: center;\r\n\r\n        width: 328px;\r\n        height: 345px;\r\n        background-color: white;\r\n        border: none;\r\n        border-radius: 0.5rem;\r\n\r\n        padding-left: 20px;\r\n        padding-right: 20px;\r\n        padding-top: 24px;\r\n\r\n        .CorpLogo {\r\n            width: 40px;\r\n            height: 40px;\r\n            border-radius: 50%;\r\n        }\r\n\r\n        .OrderOverview {\r\n            display: flex;\r\n            flex-direction: row;\r\n            justify-content: center;\r\n            align-items: center;\r\n            gap: 6px;\r\n            font-size: 18px;\r\n            font-weight: 500;\r\n            padding-top: 18px;\r\n            padding-bottom: 28px;\r\n\r\n            .OrderType {\r\n                color: ${(props) => (props.$orderType ? \"#2679ed\" : \"#e22926\")};\r\n            }\r\n        }\r\n\r\n        .OrderContent {\r\n            width: 100%;\r\n            font-size: 15px;\r\n\r\n            & div {\r\n                height: 24px;\r\n\r\n                display: flex;\r\n                flex-direction: row;\r\n                justify-content: space-between;\r\n                padding-bottom: 40px;\r\n            }\r\n\r\n            .text {\r\n                color: #292828;\r\n            }\r\n\r\n            .Volume {\r\n                border-bottom: 0.1px solid #d3cece99;\r\n            }\r\n\r\n            .TotalOrderAmout {\r\n                padding-top: 20px;\r\n                padding-bottom: 45px;\r\n            }\r\n        }\r\n\r\n        .ButtonContainer {\r\n            width: 100%;\r\n            display: flex;\r\n            flex-direction: row;\r\n            align-items: center;\r\n            padding-top: 20px;\r\n            gap: 12px;\r\n\r\n            & button {\r\n                width: 50%;\r\n                height: 32px;\r\n                border: none;\r\n                border-radius: 0.25rem;\r\n            }\r\n\r\n            .cancel {\r\n                color: ${(props) => (!props.$orderType ? \"#e22926\" : \"#2679ed\")};\r\n                background-color: ${(props) => (!props.$orderType ? \"#fcdddb\" : \"#dce9fc\")};\r\n            }\r\n\r\n            .confirm {\r\n                color: white;\r\n                background-color: ${(props) => (!props.$orderType ? \"#e22926\" : \"#2679ed\")};\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst ToastMessage = styled.div<OrderTypeProps>`\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 7px;\r\n    font-size: 14px;\r\n\r\n    .overview {\r\n        height: 100%;\r\n        display: flex;\r\n        flex-direction: row;\r\n        align-items: center;\r\n        font-weight: 700;\r\n        gap: 6px;\r\n    }\r\n\r\n    & img {\r\n        width: 24px;\r\n        height: 24px;\r\n        border-radius: 50%;\r\n        padding-bottom: 3px;\r\n    }\r\n\r\n    .orderType {\r\n        color: ${(props) => (!props.$orderType ? \"#e22926\" : \"#2679ed\")};\r\n    }\r\n`;\r\n","import styled from \"styled-components\";\r\nimport useCustomMember from \"@hooks/useCustomMember.ts\";\r\nimport { FC } from 'react';\r\nconst loginRequiredText = \"로그인이 필요한 서비스입니다\";\r\nconst loginBtnText = \"StockHolm 로그인\";\r\n\r\nconst LoginRequestIndicator: FC = () => {\r\n    const {moveToLogin} = useCustomMember();\r\n\r\n    return (\r\n        <LoginRequestContainer>\r\n            <div className=\"Notification\">{loginRequiredText}</div>\r\n            <button className=\"LoginButton\" onClick={moveToLogin}>{loginBtnText}</button>\r\n        </LoginRequestContainer>\r\n    );\r\n};\r\n\r\nconst LoginRequestContainer = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 8px;\r\n\r\n  .Notification {\r\n    color: #999999;\r\n  }\r\n\r\n  .LoginButton {\r\n    width: 170px;\r\n    height: 32px;\r\n    font-size: 15px;\r\n    font-weight: 400;\r\n    color: white;\r\n    background-color: #2f4f4f;\r\n    border: none;\r\n    border-radius: 0.3rem;\r\n    cursor: pointer;  \r\n  }\r\n`;\r\n\r\nexport default LoginRequestIndicator;\r\n","import { styled } from 'styled-components';\r\nimport useGetStockInfo from '@hooks/useGetStockInfo.ts';\r\nimport {dummyLogo, logoList} from \"@utils/companyLogos.ts\"\r\nimport StockOrder from \"./StockOrder\";\r\nimport LoginRequestIndicator from \"@components/common/LoginRequestIndicator\";\r\nimport { FC } from 'react';\r\nimport useCustomMember from '@hooks/useCustomMember';\r\n\r\ninterface BuyComponentProps {\r\n    companyId: number;\r\n}\r\n\r\nconst marketType = \"코스피\";\r\n\r\nconst BuyComponent: FC<BuyComponentProps> = ({companyId}) => {\r\n    const { loginState } = useCustomMember();\r\n    const isLogin = !!loginState.email;\r\n\r\n    const {stockInfo} = useGetStockInfo(companyId);\r\n    if (!stockInfo || !stockInfo.korName || !stockInfo.code || !stockInfo.stockInfResponseDto.prdy_ctrt) {\r\n        return null;\r\n    }\r\n\r\n    const corpName = stockInfo.korName;\r\n    const stockCode = stockInfo.code;\r\n    const stockPrice = parseInt(stockInfo.stockInfResponseDto.stck_prpr, 10).toLocaleString();\r\n    const priceChangeRate = parseFloat(stockInfo.stockInfResponseDto.prdy_ctrt);\r\n    const changeDirection = priceChangeRate > 0 ? \"▲\" : \"▼\";\r\n    const priceChangeAmount = Math.abs(parseInt(stockInfo.stockInfResponseDto.prdy_vrss, 10)).toLocaleString();\r\n    const transactionVolume = parseInt(stockInfo.stockInfResponseDto.acml_vol, 10).toLocaleString();\r\n    const logos = {\r\n        ...logoList\r\n    };\r\n\r\n    const companyLogo = logos[corpName] || dummyLogo;\r\n\r\n    return (\r\n        <Container>\r\n            {isLogin ? (\r\n                <div className=\"mainContent\">\r\n                    <StockName $priceChangeRate={priceChangeRate}>\r\n                        <img className=\"CorpLogo\" src={companyLogo} alt=\"stock logo\"/>\r\n                        <div className=\"NameContainer\">\r\n                            <div className=\"StockCode\">\r\n                                {stockCode} | {marketType}\r\n                            </div>\r\n                            <div className=\"CorpName\">{corpName}</div>\r\n                        </div>\r\n                        <div className=\"StockPrice\">{stockPrice}</div>\r\n                        <div className=\"PriceChangeAmount\">\r\n                            <div className=\"changeDirection\">{changeDirection}</div>\r\n                            {priceChangeAmount}\r\n                        </div>\r\n                        <div className=\"TransactionVolume \">\r\n                            <div className=\"PriceChangeRate\">{priceChangeRate}%</div>\r\n                            <TransactionVolume>\r\n                                {transactionVolume}주\r\n                            </TransactionVolume>\r\n                        </div>\r\n                    </StockName>\r\n                    <BuyingDiv>\r\n                    <StockOrder corpName={corpName}/>\r\n                    {/*<OrderResult />*/}\r\n                    {/*<WaitOrderIndicator />*/}\r\n                    </BuyingDiv>\r\n                </div>\r\n            ) : (\r\n                <LoginRequestIndicator/>\r\n            )}\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default BuyComponent;\r\n\r\nconst Container = styled.aside`\r\n    z-index: 1;\r\n    transition: right 0.3s ease-in-out;\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: calc(100vw - 20px);\r\n    height: 100%;\r\n    background-color: #ffffff;\r\n\r\n    .mainContent {\r\n        height: 100%;\r\n    }\r\n\r\n    .ErrorContainer {\r\n        width: 100%;\r\n        height: 80%;\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        align-items: center;\r\n        gap: 12px;\r\n\r\n        .ErrorMessage {\r\n            font-size: 20px;\r\n            color: #999999;\r\n        }\r\n\r\n        .ErrorCloseButton {\r\n            width: 35%;\r\n            height: 32px;\r\n            color: white;\r\n            background-color: #2f4f4f;\r\n            border: none;\r\n            border-radius: 0.5rem;\r\n        }\r\n    }\r\n`;\r\n\r\n// const MoneyRequireContainer = styled(LoginRequestContainer)``;\r\n\r\ninterface priceChangeRageProps{\r\n    $priceChangeRate: number;\r\n}\r\n\r\nconst StockName = styled.section<priceChangeRageProps>`\r\n    border-bottom: 1px solid #ddd;\r\n    width: calc(100vw - 20px);\r\n    height: 64px;\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    padding-top: 7px;\r\n    padding-bottom: 8px;\r\n    padding-left: 16px;\r\n    gap: 9px;\r\n    justify-content: space-evenly;\r\n    position : fixed;\r\n    background-color: white;\r\n    z-index: 100;\r\n\r\n    .CorpLogo {\r\n        width: 28px;\r\n        height: 28px;\r\n        border-radius: 50%;\r\n    }\r\n\r\n    .NameContainer {\r\n        height: 40px;\r\n        display: flex;\r\n        flex-direction: column;\r\n    }\r\n\r\n    .CorpName {\r\n        font-size: 16px;\r\n        font-weight: 500;\r\n        color: #1c1c1c;\r\n    }\r\n\r\n    .StockCode {\r\n        font-size: 12px;\r\n        color: #999999;\r\n    }\r\n    .StockPrice {\r\n        font-size: 19px;\r\n        color: ${(props) => (props.$priceChangeRate > 0 ? \"#ed2926\" : props.$priceChangeRate === 0 ? \"black\" : \"#3177d7\")};\r\n        font-weight: 550;\r\n    }\r\n    .PriceChangeRate{\r\n        font-size: 19px;\r\n        color: ${(props) => (props.$priceChangeRate > 0 ? \"#ed2926\" : props.$priceChangeRate === 0 ? \"black\" : \"#3177d7\")};\r\n        display: flex;\r\n        flex-direction: row;\r\n        font-weight: 550;\r\n    }\r\n    .PriceChangeAmount {\r\n        font-size: 14px;\r\n        color: ${(props) => (props.$priceChangeRate > 0 ? \"#ed2926\" : props.$priceChangeRate === 0 ? \"black\" : \"#3177d7\")};\r\n        display: flex;\r\n        flex-direction: row;\r\n        gap: 2px;\r\n        .changeDirection {\r\n            font-size: 8px;\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n        }\r\n    }\r\n`;\r\n\r\nconst TransactionVolume = styled.div`\r\n    white-space: nowrap;\r\n    min-width: min-content;\r\n    font-size: 11px;\r\n    color: #999;\r\n    font-weight: 400;\r\n`;\r\n\r\nconst BuyingDiv = styled.div`\r\n    margin-top: 64px;\r\n    padding-bottom: 130px;\r\n`;\r\n","import {useParams} from \"react-router\";\r\nimport BuyComponent from '@components/stock/domestic/detail/buy/BuyComponent';\r\n\r\nfunction Buy() {\r\n\r\n    const {companyId} = useParams()\r\n\r\n    return (\r\n        <BuyComponent companyId={Number(companyId)} />\r\n    );\r\n}\r\n\r\nexport default Buy;\r\n"],"names":["MutationObserver","_a","Subscribable","client","options","__privateAdd","_MutationObserver_instances","_client","_currentResult","_currentMutation","_mutateOptions","__privateSet","__privateMethod","updateResult_fn","prevOptions","__privateGet","shallowEqualObjects","hashKey","action","notify_fn","variables","state","getDefaultState","notifyManager","context","_b","_d","_c","_f","_e","_h","_g","listener","useMutation","queryClient","useQueryClient","observer","React.useState","React.useEffect","result","React.useSyncExternalStore","React.useCallback","onStoreChange","mutate","mutateOptions","noop","shouldThrowError","host","API_SERVER_HOST","useTradeStock","companyId","useParams","numericCompanyId","orderType","useSelector","orderPrice","orderVolume","loginState","useCustomMember","memberId","postOrderRequest","price","volume","jwtAxios","changeRateUnit","StockPrice","index","changeRate","totalSellingVolume","totalBuyingVolume","dispatch","useDispatch","ref","useRef","handleSetOrderPrice","setStockOrderPrice","useEffect","jsxs","Container","Price","jsx","Volume","VolumePercentage","props","upperPriceVolumeSum","lowerPriceVolumeSum","width","setWidth","useState","StockVolumePercentage","styled","StockPriceList","companyIdNumber","stockOrderType","stockInfo","useGetStockInfo","presentStockPrice","priceChageAmountComparedYesterday","yesterDayStockClosingPrice","sellingPrice","buyingPrice","i","sellingPriceProp","sellingVolumeProp","buyingPriceProp","buyingVolumeProp","sellingInfo","buyingInfo","existSellingPrice","selling","existBuyingPrice","priceInterval","dummySellingData","dummyBuyingData","sellingAndBuyingPrice","acc","cur","PriceList","item","idx","priceSettingTitle","unitText","noVolumeNotification","existVolumeNotification","PriceSetting","priceChangeTimer","setPriceChangeTimer","askp1","askp2","askp3","askp4","askp5","askp6","askp7","askp8","askp9","askp10","defaultPrice","orderPossibility","setOrderPossibility","bidp1","bidp2","bidp3","bidp4","bidp5","bidp6","bidp7","bidp8","bidp9","bidp10","handleCheckTradePossibility","handlePlusOrderPrice","plusStockOrderPrice","handleMinusOrderPrice","minusStockOrderPrice","handleInputArrowBtn","event","handleWriteOrderPrice","inputPrice","numberInputPrice","newTimer","remainder","modifiedInputValue","PriceController","UnitContent","CheckTradingVolume","getCashData","useGetCash","isLogin","data","isLoading","isError","useQuery","getHoldingStock","useGetHoldingStock","volumeSettingTitle","maximumVolumeText01","volumeUnit","volumePercentage01","volumePercentage02","volumePercentage03","volumePercentage04","percentageUnit","VolumeSetting","availableSellingStock","cashData","holdingStockData","maximumBuyingVolume","holdingCompanyStock","stock","handlePlusOrderVolume","plusStockOrderVolume","handleMinusOrderVolume","minusStockOrderVolume","handleWriteOrderVolume","inputValue","numberInputValue","setStockOrderVolume","handleSetVolumePercentage","volumePercentage","TitleContainer","VolumeSettingBox","VolumeController","PercentageBox","availableMoneyText01","availableMoneyText02","totalAmountText","totalAmountUnit","OrderDecisionBtn","cash","totalOrderAmount","setTotalOrderAmount","orderBtnText","handleOpenDecisionWindow","openDecisionWindow","AvailableMoney","TotalAmount","OrderBtn","orderType01","orderType02","StockOrderSetting","stockInfoLoading","stockInfoError","Fragment","handleSetBuying","orderTypeBuying","handleSetSelling","orderTypeSelling","Buying","Selling","OrderTypeChangeEffectLine","DividingContainer","DefaultLine","DividingLine","orderFailureMessage01","orderFailureMessage02","orderFailureMessage03","orderFailureButtonText","orderPriceText","orderVolumeText","totalOrderAmountText","priceUnit","cancelButtonText","confirmButtonText","toastText","StockOrder","corpName","decisionWindow","orderTypeText","totalPrice","companyLogo","logoList","dummyLogo","handleCloseDecisionWindow","closeDecisionWindow","orderRequest","handleOrderConfirm","toast","ToastMessage","orderFailureCase02","OrderFailed","OrderConfirm","loginRequiredText","loginBtnText","LoginRequestIndicator","moveToLogin","LoginRequestContainer","marketType","BuyComponent","stockCode","stockPrice","priceChangeRate","changeDirection","priceChangeAmount","transactionVolume","StockName","TransactionVolume","BuyingDiv","Buy"],"mappings":"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","x_google_ignoreList":[0,1]}