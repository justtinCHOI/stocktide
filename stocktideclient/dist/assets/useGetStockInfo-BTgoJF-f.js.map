{"version":3,"file":"useGetStockInfo-BTgoJF-f.js","sources":["../../src/hooks/useGetStockInfo.ts"],"sourcesContent":["import {useQuery} from \"@tanstack/react-query\";\r\nimport jwtAxios from \"@utils/jwtUtil\";\r\nimport {useEffect, useState} from \"react\";\r\n\r\nconst BASE_URL = import.meta.env.VITE_API_URL;\r\n\r\n//useGetStockInfo : 현재시각에 가장 30분 단위에 패칭을 하고 그후 10분단위로 AXIOS를 호출로 회사 정보 가져오기.\r\nconst useGetStockInfo = (companyId: number) => {\r\n\r\n    const [autoRefetch, setAutoRefetch] = useState(false);\r\n\r\n    // 시간대 (timeZone) 별로 queryKey를 다르게 설정해서, 서버 데이터가 동일할 때는 캐싱된 데이터 활용하고 서버 데이터가 갱신됐을 때는 새롭게 받아옴 (서버 데이터 30분마다 갱신)\r\n    const currentTime = new Date();\r\n    const [month, day, hour, minute] = [currentTime.getMonth(), currentTime.getDate(), currentTime.getHours(), currentTime.getMinutes()];\r\n    const timeZone = minute === 0 || minute === 30 ? \"30 or 60\" : 0 < minute && minute < 30 ? \"1~29\" : \"31~59\";\r\n    const queryKey = `${month}월 ${day}일 ${hour}시 ${timeZone}`;\r\n\r\n    // 현재 시각이 30분, 정각이 아닌 경우 남은 시간 계산하여 checkTime 함수 다시 실행\r\n    useEffect(() => {\r\n        if (minute === 0 || minute === 30) {\r\n            setAutoRefetch(true);\r\n        } else if (0 < minute && minute < 30) {\r\n            const delayTime = (30 - minute) * 60000;\r\n            setTimeout(() => {\r\n                refetch().then();\r\n                setAutoRefetch(true);\r\n            }, delayTime);\r\n        } else if (30 < minute && minute < 60) {\r\n            const delayTime = (60 - minute) * 60000;\r\n            setTimeout(() => {\r\n                refetch().then();\r\n                setAutoRefetch(true);\r\n            }, delayTime);\r\n        }\r\n    }, []);\r\n\r\n    const { data, isLoading, error, refetch } = useQuery({\r\n        queryKey: ['stockInfo', companyId, queryKey],\r\n        queryFn: () => getStockInfo(companyId),\r\n        enabled: true,\r\n        staleTime: 1000 * 60 * 5,\r\n        refetchInterval: autoRefetch ? 60000 * 10 : false\r\n    });\r\n\r\n    return { stockInfo: data, stockInfoLoading: isLoading, stockInfoError: error };\r\n};\r\n\r\nconst getStockInfo = async (companyId: number) => {\r\n\r\n    const res = await jwtAxios.get(`${BASE_URL}/api/company/${companyId}`);\r\n\r\n    return res.data;\r\n};\r\n\r\nexport default useGetStockInfo;\r\n"],"names":["BASE_URL","useGetStockInfo","companyId","autoRefetch","setAutoRefetch","useState","currentTime","month","day","hour","minute","timeZone","queryKey","useEffect","delayTime","refetch","data","isLoading","error","useQuery","getStockInfo","jwtAxios"],"mappings":"4HAIA,MAAMA,EAAW,8BAGXC,EAAmBC,GAAsB,CAE3C,KAAM,CAACC,EAAaC,CAAc,EAAIC,EAAAA,SAAS,EAAK,EAG9CC,MAAkB,KAClB,CAACC,EAAOC,EAAKC,EAAMC,CAAM,EAAI,CAACJ,EAAY,SAAY,EAAAA,EAAY,UAAWA,EAAY,WAAYA,EAAY,YAAY,EAC7HK,EAAWD,IAAW,GAAKA,IAAW,GAAK,WAAa,EAAIA,GAAUA,EAAS,GAAK,OAAS,QAC7FE,EAAW,GAAGL,CAAK,KAAKC,CAAG,KAAKC,CAAI,KAAKE,CAAQ,GAGvDE,EAAAA,UAAU,IAAM,CACR,GAAAH,IAAW,GAAKA,IAAW,GAC3BN,EAAe,EAAI,UACZ,EAAIM,GAAUA,EAAS,GAAI,CAC5B,MAAAI,GAAa,GAAKJ,GAAU,IAClC,WAAW,IAAM,CACbK,EAAA,EAAU,KAAK,EACfX,EAAe,EAAI,GACpBU,CAAS,CACL,SAAA,GAAKJ,GAAUA,EAAS,GAAI,CAC7B,MAAAI,GAAa,GAAKJ,GAAU,IAClC,WAAW,IAAM,CACbK,EAAA,EAAU,KAAK,EACfX,EAAe,EAAI,GACpBU,CAAS,CAAA,CAEpB,EAAG,EAAE,EAEL,KAAM,CAAE,KAAAE,EAAM,UAAAC,EAAW,MAAAC,EAAO,QAAAH,CAAA,EAAYI,EAAS,CACjD,SAAU,CAAC,YAAajB,EAAWU,CAAQ,EAC3C,QAAS,IAAMQ,EAAalB,CAAS,EACrC,QAAS,GACT,UAAW,IAAO,GAAK,EACvB,gBAAiBC,EAAc,IAAQ,GAAK,EAAA,CAC/C,EAED,MAAO,CAAE,UAAWa,EAAM,iBAAkBC,EAAW,eAAgBC,CAAM,CACjF,EAEME,EAAe,MAAOlB,IAEZ,MAAMmB,EAAS,IAAI,GAAGrB,CAAQ,gBAAgBE,CAAS,EAAE,GAE1D"}