{"version":3,"file":"useCustomCash-B71rFefH.js","sources":["../../src/hooks/useCustomCash.ts"],"sourcesContent":["import { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    getCashListRequest,\r\n    createCashRequest,\r\n    deleteCashRequest,\r\n    updateCashRequest,\r\n    setCashId\r\n} from \"@slices/cashSlice\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { AppDispatch, RootState, store } from '@/store';\r\nimport { CustomCashHook } from '@typings/hooks';\r\nimport { Cash } from '@typings/entity';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst useCustomCash = (): CustomCashHook => {\r\n    const dispatch = useDispatch<AppDispatch>();\r\n    const cashState = useSelector((state: RootState) => state.cashSlice);\r\n    const navigate = useNavigate();\r\n\r\n    const doCreateCash = async (memberId: number): Promise<Cash> => {\r\n        dispatch(createCashRequest(memberId));\r\n        return new Promise((resolve, reject) => {\r\n            const unsubscribe = store.subscribe(() => {\r\n                const state = store.getState().cashSlice;\r\n                if (!state.loading) {\r\n                    unsubscribe();\r\n                    if (state.error) {\r\n                        reject(state.error);\r\n                    } else {\r\n                        resolve(state.cashList[state.cashList.length - 1]);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    const doGetCashList = async (memberId: number): Promise<Cash[]> => {\r\n        dispatch(getCashListRequest(memberId));\r\n        return new Promise((resolve, reject) => {\r\n            const unsubscribe = store.subscribe(() => {\r\n                const state = store.getState().cashSlice;\r\n                if (!state.loading) {\r\n                    unsubscribe();\r\n                    if (state.error) {\r\n                        reject(state.error);\r\n                    } else {\r\n                        resolve(state.cashList);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    const doDeleteCash = async (cashId: number): Promise<number> => {\r\n        dispatch(deleteCashRequest(cashId));\r\n        return new Promise((resolve, reject) => {\r\n            const unsubscribe = store.subscribe(() => {\r\n                const state = store.getState().cashSlice;\r\n                if (!state.loading) {\r\n                    unsubscribe();\r\n                    if (state.error) {\r\n                        reject(state.error);\r\n                    } else {\r\n                        resolve(cashId);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    const doUpdateCash = async (cashId: number, money: number, dollar: number): Promise<Cash> => {\r\n        dispatch(updateCashRequest({ cashId, money, dollar }));\r\n        return new Promise((resolve, reject) => {\r\n            const unsubscribe = store.subscribe(() => {\r\n                const state = store.getState().cashSlice;\r\n                if (!state.loading) {\r\n                    unsubscribe();\r\n                    if (state.error) {\r\n                        toast.error(\"계좌 업데이트에 실패했습니다\");\r\n                        reject(state.error);\r\n                    } else {\r\n                        const updatedCash = state.cashList.find((cash: Cash) => cash.cashId === cashId);\r\n                        if (updatedCash) {\r\n                            resolve(updatedCash);\r\n                        } else {\r\n                            reject(new Error('Updated cash not found'));\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    const doUpdateCashId = (cashId: number) => {\r\n        dispatch(setCashId(cashId));\r\n    }\r\n\r\n    const moveToManage = () => {\r\n        navigate({pathname: '/my/account/manage'}, {replace:true});\r\n    }\r\n\r\n    return {\r\n        cashState,\r\n        doUpdateCashId,\r\n        doCreateCash,\r\n        doGetCashList,\r\n        doDeleteCash,\r\n        doUpdateCash,\r\n        moveToManage\r\n    };\r\n}\r\n\r\nexport default useCustomCash;"],"names":["useCustomCash","dispatch","useDispatch","cashState","useSelector","state","navigate","useNavigate","cashId","setCashId","memberId","createCashRequest","resolve","reject","unsubscribe","store","getCashListRequest","deleteCashRequest","money","dollar","updateCashRequest","toast","updatedCash","cash"],"mappings":"yIAcA,MAAMA,EAAgB,IAAsB,CACxC,MAAMC,EAAWC,EAAyB,EACpCC,EAAYC,EAAaC,GAAqBA,EAAM,SAAS,EAC7DC,EAAWC,EAAY,EAoFtB,MAAA,CACH,UAAAJ,EACA,eAVoBK,GAAmB,CAC9BP,EAAAQ,EAAUD,CAAM,CAAC,CAC9B,EASI,aArFiB,MAAOE,IACfT,EAAAU,EAAkBD,CAAQ,CAAC,EAC7B,IAAI,QAAQ,CAACE,EAASC,IAAW,CAC9B,MAAAC,EAAcC,EAAM,UAAU,IAAM,CAChC,MAAAV,EAAQU,EAAM,SAAA,EAAW,UAC1BV,EAAM,UACKS,EAAA,EACRT,EAAM,MACNQ,EAAOR,EAAM,KAAK,EAElBO,EAAQP,EAAM,SAASA,EAAM,SAAS,OAAS,CAAC,CAAC,EAEzD,CACH,CAAA,CACJ,GAwED,cArEkB,MAAOK,IAChBT,EAAAe,EAAmBN,CAAQ,CAAC,EAC9B,IAAI,QAAQ,CAACE,EAASC,IAAW,CAC9B,MAAAC,EAAcC,EAAM,UAAU,IAAM,CAChC,MAAAV,EAAQU,EAAM,SAAA,EAAW,UAC1BV,EAAM,UACKS,EAAA,EACRT,EAAM,MACNQ,EAAOR,EAAM,KAAK,EAElBO,EAAQP,EAAM,QAAQ,EAE9B,CACH,CAAA,CACJ,GAwDD,aArDiB,MAAOG,IACfP,EAAAgB,EAAkBT,CAAM,CAAC,EAC3B,IAAI,QAAQ,CAACI,EAASC,IAAW,CAC9B,MAAAC,EAAcC,EAAM,UAAU,IAAM,CAChC,MAAAV,EAAQU,EAAM,SAAA,EAAW,UAC1BV,EAAM,UACKS,EAAA,EACRT,EAAM,MACNQ,EAAOR,EAAM,KAAK,EAElBO,EAAQJ,CAAM,EAEtB,CACH,CAAA,CACJ,GAwCD,aArCiB,MAAOA,EAAgBU,EAAeC,KACvDlB,EAASmB,EAAkB,CAAE,OAAAZ,EAAQ,MAAAU,EAAO,OAAAC,CAAQ,CAAA,CAAC,EAC9C,IAAI,QAAQ,CAACP,EAASC,IAAW,CAC9B,MAAAC,EAAcC,EAAM,UAAU,IAAM,CAChC,MAAAV,EAAQU,EAAM,SAAA,EAAW,UAC3B,GAAA,CAACV,EAAM,QAEP,GADYS,EAAA,EACRT,EAAM,MACNgB,EAAM,MAAM,iBAAiB,EAC7BR,EAAOR,EAAM,KAAK,MACf,CACG,MAAAiB,EAAcjB,EAAM,SAAS,KAAMkB,GAAeA,EAAK,SAAWf,CAAM,EAC1Ec,EACAV,EAAQU,CAAW,EAEZT,EAAA,IAAI,MAAM,wBAAwB,CAAC,CAC9C,CAER,CACH,CAAA,CACJ,GAkBD,aAXiB,IAAM,CACvBP,EAAS,CAAC,SAAU,sBAAuB,CAAC,QAAQ,GAAK,CAC7D,CAUA,CACJ"}